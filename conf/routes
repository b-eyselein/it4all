# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                         controllers.Application.index

# User
GET           /user                                     controllers.UserController.index
GET           /preferences                              controllers.UserController.preferences
PUT           /preferences                              controllers.UserController.saveOptions

# Controller
GET           /admin                                    controllers.AdminController.index

GET           /users                                    controllers.AdminController.users
PUT           /users/changeRole/:user                   controllers.AdminController.changeRole(user: String)

# Essentials - Nary, Boolean, Ebnf?
GET           /essentials                               controllers.exes.EssentialsController.index

GET           /essentials/nary/conv                     controllers.exes.EssentialsController.newNaryConversionQuestion(fromBase: String, toBase: String)
POST          /essentials/nary/conv                     controllers.exes.EssentialsController.checkNaryConversionSolution(fromBase: String, toBase: String)

GET           /essentials/nary/add                      controllers.exes.EssentialsController.newNaryAdditionQuestion(base: String)
POST          /essentials/nary/add                      controllers.exes.EssentialsController.checkNaryAdditionSolution(base: String)

GET           /essentials/nary/twocomp/:verb            controllers.exes.EssentialsController.newNaryTwoComplementQuestion(verb: Boolean)
POST          /essentials/nary/twocomp/:verb            controllers.exes.EssentialsController.checkNaryTwoComplementSolution(verb: Boolean)

GET           /essentials/bool/fillout                  controllers.exes.EssentialsController.newBoolFilloutQuestion
POST          /essentials/bool/fillout                  controllers.exes.EssentialsController.checkBoolFilloutSolution

GET           /essentials/bool/creation                 controllers.exes.EssentialsController.newBoolCreationQuestion
PUT           /essentials/bool/creation                 controllers.exes.EssentialsController.checkBoolCreationSolutionLive
POST          /essentials/bool/creation                 controllers.exes.EssentialsController.checkBoolCreationSolution
# Essentials - End

# Mindmap - Anfang
GET           /mindmap/admin                            controllers.exes.MindmapController.adminIndex

GET           /mindmap/import                           controllers.exes.MindmapController.adminImportExercises
GET           /mindmap/export                           controllers.exes.MindmapController.adminExportExercises
GET           /mindmap/exportFile                       controllers.exes.MindmapController.adminExportExercisesAsFile

GET           /mindmap                                  controllers.exes.MindmapController.index(page: Int ?= 1)

POST          /mindmap/upload                           controllers.exes.MindmapController.upload

# Mindmap - Ende

# XML - Anfang
GET           /xml/admin                                controllers.exes.XmlController.adminIndex

GET           /xml/admin/import                         controllers.exes.XmlController.adminImportExercises
GET           /xml/admin/export                         controllers.exes.XmlController.adminExportExercises
GET           /xml/admin/exportFile                     controllers.exes.XmlController.adminExportExercisesAsFile
#POST          /xml/upload                               controllers.exes.XmlController.uploadFile

GET           /xml/admin/exerciseList                   controllers.exes.XmlController.adminExerciseList

GET           /xml/admin/exerciseList/:id               controllers.exes.XmlController.adminEditExerciseForm(id: Int)
PUT           /xml/admin/exerciseList/:id               controllers.exes.XmlController.adminEditExercise(id: Int)
POST          /xml/admin/exerciseList/:id               controllers.exes.XmlController.adminEditExercise(id: Int)
DELETE        /xml/admin/exerciseList/:id               controllers.exes.XmlController.adminDeleteExercise(id: Int)

PUT           /xml/admin/exercise/:id/state             controllers.exes.XmlController.adminChangeExState(id: Int)

GET           /xml/admin/newExForm                      controllers.exes.XmlController.adminNewExerciseForm

GET           /xml/                                     controllers.exes.XmlController.index(page: Int ?= 1)

GET           /xml/solve/:id                            controllers.exes.XmlController.exercise(id: Int)
PUT           /xml/solve/:id                            controllers.exes.XmlController.correctLive(id: Int)
POST          /xml/solve/:id                            controllers.exes.XmlController.correct(id: Int)


GET           /xml/playground                           controllers.exes.XmlController.playground
PUT           /xml/playground                           controllers.exes.XmlController.playgroundCorrection
# XML - Ende

# Question - Anfang
# Controlleristrator
GET           /question/admin                           controllers.exes.QuestionController.adminIndex

GET           /question/import                          controllers.exes.QuestionController.adminImportExercises
GET           /question/export                          controllers.exes.QuestionController.adminExportExercises
GET           /question/export                          controllers.exes.QuestionController.adminExportExercisesAsFile

GET           /question/questions                       controllers.exes.QuestionController.adminExerciseList

GET           /question/freetext/grade                  controllers.exes.QuestionController.gradeFreetextAnswers
GET           /question/freetext/grade/:id/:user        controllers.exes.QuestionController.gradeFreetextAnswer(id: Int, user: String)

GET           /question/notAssigned                     controllers.exes.QuestionController.notAssignedQuestions
GET           /question/assign                          controllers.exes.QuestionController.assignQuestionsForm
POST          /question/assign                          controllers.exes.QuestionController.assignQuestions

GET           /question/assign/:id                      controllers.exes.QuestionController.assignQuestionsSingleForm(id: Int)

GET           /question/admin/exerciseList/:id          controllers.exes.QuestionController.adminEditExerciseForm(id: Int)
PUT           /question/admin/exerciseList/:id          controllers.exes.QuestionController.adminEditExercise(id: Int)
POST          /question/admin/exerciseList/:id          controllers.exes.QuestionController.adminEditExercise(id: Int)
DELETE        /question/admin/exerciseList/:id          controllers.exes.QuestionController.adminDeleteExercise(id: Int)

PUT           /question/exercise/:id/state              controllers.exes.QuestionController.adminChangeExState(id: Int)

GET           /question/newQuestionForm                 controllers.exes.QuestionController.adminNewExerciseForm

# All
GET           /question/                                controllers.exes.QuestionController.index(start: Int ?= 1)


GET           /question/new/:isFreetext                 controllers.exes.QuestionController.newQuestionForm(isFreetext: Boolean)
POST          /question/new/:isFreetext                 controllers.exes.QuestionController.newQuestion(isFreetext: Boolean)

GET           /question/edit/:id                        controllers.exes.QuestionController.editQuestionForm(id: Int)
POST          /question/edit/:id                        controllers.exes.QuestionController.editQuestion(id: Int)

GET           /question/question/:id                    controllers.exes.QuestionController.exercise(id: Int)
POST          /question/question/:id                    controllers.exes.QuestionController.questionResult( id: Int)


GET           /question/quizAdmin                       controllers.exes.QuestionController.adminIndex

#GET          /question/quizzes/export                  controllers.exes.QuestionController.exportExerciseCollections
#GET          /question/quizzes/import                  controllers.exes.QuestionController.importExerciseCollections
#POST          /question/quizzes/upload                  controllers.exes.QuestionController.uploadFile

GET           /question/quizzes                         controllers.exes.QuestionController.quizzes
# exerciseCollections
POST          /question/quizzes                         controllers.exes.QuestionController.adminIndex
#newExercise

#GET           /question/newQuizForm                     controllers.exes.QuestionController.newExerciseCollectionForm


# Quizzes

GET           /question/quiz/:id                        controllers.exes.QuestionController.quiz(id: Int)

GET           /question/start/:quizId                   controllers.exes.QuestionController.quizStart(quizId: Int)
GET           /question/:quizId/:questionId             controllers.exes.QuestionController.quizQuestion(quizId: Int, questionId: Int)
POST          /question/:quizId/:questionId             controllers.exes.QuestionController.quizCorrection(quizId: Int, questionId: Int)
# Question - Ende

# Prog - Anfang
# Controlleristrator
GET           /prog/admin                               controllers.exes.ProgController.adminIndex


GET           /prog/import                              controllers.exes.ProgController.adminImportExercises
GET           /prog/export                              controllers.exes.ProgController.adminExportExercises
GET           /prog/exportFile                          controllers.exes.ProgController.adminExportExercisesAsFile

GET           /prog/admin/exerciseList                  controllers.exes.ProgController.adminExerciseList

GET           /prog/admin/exerciseList/:id              controllers.exes.ProgController.adminEditExerciseForm(id: Int)
PUT           /prog/admin/exerciseList/:id              controllers.exes.ProgController.adminEditExercise(id: Int)
POST          /prog/admin/exerciseList/:id              controllers.exes.ProgController.adminEditExercise(id: Int)
DELETE        /prog/admin/exerciseList/:id              controllers.exes.ProgController.adminDeleteExercise(id: Int)

PUT           /prog/exercise/:id/state                  controllers.exes.ProgController.adminChangeExState(id: Int)

GET           /prog/newExForm                           controllers.exes.ProgController.adminNewExerciseForm


# All
GET           /prog/                                    controllers.exes.ProgController.index(page: Int ?= 1)

GET           /prog/testdata/:id                        controllers.exes.ProgController.testData(id: Int)
POST          /prog/validate/:id                        controllers.exes.ProgController.validateTestData(id: Int)
PUT           /prog/validate/:id                        controllers.exes.ProgController.validateTestDataLive(id: Int)

GET           /prog/declaration                         controllers.exes.ProgController.getDeclaration(language: String ?= "")

GET           /prog/exercise/:id/                       controllers.exes.ProgController.exercise(id: Int)
PUT           /prog/exercise/:id                        controllers.exes.ProgController.correctLive(id: Int)
POST          /prog/exercise/:id                        controllers.exes.ProgController.correct(id: Int)
# Prog - Ende

# Spread - Anfang
GET           /spread/admin                             controllers.exes.SpreadController.adminIndex

GET           /spread/import                            controllers.exes.SpreadController.adminImportExercises
GET           /spread/export                            controllers.exes.SpreadController.adminExportExercises
GET           /spread/exportFile                        controllers.exes.SpreadController.adminExportExercisesAsFile
#POST          /spread/upload                            controllers.exes.SpreadController.uploadFile

GET           /spread/admin/exerciseList                controllers.exes.SpreadController.adminExerciseList

GET           /spread/admin/exerciseList/:id            controllers.exes.SpreadController.adminEditExerciseForm(id: Int)
PUT           /spread/admin/exerciseList/:id            controllers.exes.SpreadController.adminEditExercise(id: Int)
POST          /spread/admin/exerciseList/:id            controllers.exes.SpreadController.adminEditExercise(id: Int)
DELETE        /spread/admin/exerciseList/:id            controllers.exes.SpreadController.adminDeleteExercise(id: Int)

PUT           /spread/exercise/:id/state                controllers.exes.SpreadController.adminChangeExState(id: Int)

GET           /spread/newExForm                         controllers.exes.SpreadController.adminNewExerciseForm

# User
GET           /spread/                                  controllers.exes.SpreadController.index(page: Int ?= 1)

POST          /spread/:id                               controllers.exes.SpreadController.upload(id: Int)
GET           /spread/:id/:part                         controllers.exes.SpreadController.download(id: Int, part: String)
GET           /spread/temp/:id/:typ                     controllers.exes.SpreadController.exercise(id: Int, typ: String)
# Spread - Ende

# Web - Anfang
GET           /web/admin                                controllers.exes.WebController.adminIndex

GET           /web/import                               controllers.exes.WebController.adminImportExercises
GET           /web/export                               controllers.exes.WebController.adminExportExercises
GET           /web/exportFile                           controllers.exes.WebController.adminExportExercisesAsFile
#POST          /web/upload                               controllers.exes.WebController.uploadFile

GET           /web/admin/exerciseList                   controllers.exes.WebController.adminExerciseList

GET           /web/admin/exerciseList/:id               controllers.exes.WebController.adminEditExerciseForm(id: Int)
PUT           /web/admin/exerciseList/:id               controllers.exes.WebController.adminEditExercise(id: Int)
POST          /web/admin/exerciseList/:id               controllers.exes.WebController.adminEditExercise(id: Int)
DELETE        /web/admin/exerciseList/:id               controllers.exes.WebController.adminDeleteExercise(id: Int)

PUT           /web/exercise/:id/state                   controllers.exes.WebController.adminChangeExState(id: Int)


GET           /web/exercises/:id/rest                   controllers.exes.WebController.exRest(id: Int)

GET           /web/newExForm                            controllers.exes.WebController.adminNewExerciseForm

# User
GET           /web/                                     controllers.exes.WebController.index(page: Int ?= 1)

GET           /web/playground                           controllers.exes.WebController.playground


GET           /web/:id/:exType                          controllers.exes.WebController.exercise(id: Int, exType: String)

PUT           /web/:id/:exType                          controllers.exes.WebController.correctLive(id: Int, exType: String)
POST          /web/:id/:exType                          controllers.exes.WebController.correct(id: Int, exType: String)

GET           /web/sol/:user/:id                        controllers.exes.WebController.site(user: String, id: Int)
# Web - Ende

# Ebnf - Anfang
GET           /ebnf/admin                               controllers.exes.EbnfController.adminIndex

GET           /ebnf/import                              controllers.exes.EbnfController.adminImportExercises
GET           /ebnf/export                              controllers.exes.EbnfController.adminExportExercises
GET           /ebnf/exportFile                          controllers.exes.EbnfController.adminExportExercisesAsFile
#POST          /ebnf/upload                              controllers.exes.EbnfController.uploadFile


GET           /ebnf/admin/exerciseList                  controllers.exes.EbnfController.adminExerciseList

GET           /ebnf/admin/exerciseList/:id              controllers.exes.EbnfController.adminEditExerciseForm(id: Int)
PUT           /ebnf/admin/exerciseList/:id              controllers.exes.EbnfController.adminEditExercise(id: Int)
POST          /ebnf/admin/exerciseList/:id              controllers.exes.EbnfController.adminEditExercise(id: Int)
DELETE        /ebnf/admin/exerciseList/:id              controllers.exes.EbnfController.adminDeleteExercise(id: Int)

PUT           /ebnf/exercise/:id/state                  controllers.exes.EbnfController.adminChangeExState(id: Int)

GET           /ebnf/newExForm                           controllers.exes.EbnfController.adminNewExerciseForm

# User
GET           /ebnf/                                    controllers.exes.EbnfController.index(page: Int ?= 1)
GET           /ebnf/:id                                 controllers.exes.EbnfController.exercise(id: Int)
PUT           /ebnf/:id                                 controllers.exes.EbnfController.correctLive(id: Int)
POST          /ebnf/:id                                 controllers.exes.EbnfController.correct(id: Int)
DELETE        /ebnf/:id                                 controllers.exes.EbnfController.adminDeleteExercise(id: Int)
# Ebnf - Ende

# Uml - Anfang
# Controller
GET           /uml/admin                                controllers.exes.UmlController.adminIndex

GET           /uml/import                               controllers.exes.UmlController.adminImportExercises
GET           /uml/export                               controllers.exes.UmlController.adminExportExercises
GET           /uml/exportFile                           controllers.exes.UmlController.adminExportExercisesAsFile
#POST          /uml/upload                               controllers.exes.UmlController.uploadFile

GET           /uml/admin/exerciseList                   controllers.exes.UmlController.adminExerciseList

GET           /uml/admin/exerciseList/:id               controllers.exes.UmlController.adminEditExerciseForm(id: Int)
PUT           /uml/admin/exerciseList/:id               controllers.exes.UmlController.adminEditExercise(id: Int)
POST          /uml/admin/exerciseList/:id               controllers.exes.UmlController.adminEditExercise(id: Int)
DELETE        /uml/admin/exerciseList/:id               controllers.exes.UmlController.adminDeleteExercise(id: Int)

PUT           /uml/exercise/:id/state                   controllers.exes.UmlController.adminChangeExState(id: Int)


GET           /uml/newEx/form                           controllers.exes.UmlController.adminNewExerciseForm
POST          /uml/newEx/text                           controllers.exes.UmlController.newExerciseStep2
POST          /uml/newEx/solution                       controllers.exes.UmlController.newExerciseStep3

PUT           /uml/newEx/checkSolution                  controllers.exes.UmlController.checkSolution

# User
GET           /uml/                                     controllers.exes.UmlController.index(page: Int ?= 1)

GET           /uml/:id/:part                            controllers.exes.UmlController.exercise(id: Int, part: String)
POST          /uml/:id/:part                            controllers.exes.UmlController.correct(id: Int, part)
# Uml - Ende

# Blanks - Anfang...

GET           /blanks/admin                             controllers.exes.BlanksController.adminIndex

GET           /blanks/import                            controllers.exes.BlanksController.adminImportExercises
GET           /blanks/export                            controllers.exes.BlanksController.adminExportExercises
GET           /blanks/exportFile                        controllers.exes.BlanksController.adminExportExercisesAsFile
#POST          /blanks/upload                               controllers.exes.BlanksController.uploadFile

GET           /blanks/admin/exerciseList                controllers.exes.BlanksController.adminExerciseList

GET           /blanks/admin/exerciseList/:id            controllers.exes.BlanksController.adminEditExerciseForm(id: Int)
PUT           /blanks/admin/exerciseList/:id            controllers.exes.BlanksController.adminEditExercise(id: Int)
POST          /blanks/admin/exerciseList/:id            controllers.exes.BlanksController.adminEditExercise(id: Int)
DELETE        /blanks/admin/exerciseList/:id            controllers.exes.BlanksController.adminDeleteExercise(id: Int)

PUT           /blanks/exercise/:id/state                controllers.exes.BlanksController.adminChangeExState(id: Int)


GET           /blanks/newExForm                         controllers.exes.BlanksController.adminNewExerciseForm

# User
GET           /blanks/                                  controllers.exes.BlanksController.index(page: Int ?= 1)

GET           /blanks/:id                               controllers.exes.BlanksController.exercise(id: Int)
POST          /blanks/:id                               controllers.exes.BlanksController.correct(id: Int)

# Blanks - Ende


# Sql - Anfang
# Controlleristrator
GET           /sql/scenarioes/admin                     controllers.exes.SqlController.adminIndex

GET           /sql/scenarioes/import                    controllers.exes.SqlController.adminImportExercises
GET           /sql/scenarioes/exportFile                controllers.exes.SqlController.adminExportExercisesAsFile
#POST          /sql/upload                               controllers.exes.SqlController.uploadFile

GET           /sql/admin/:id                            controllers.exes.SqlController.scenarioAdmin(id: Int)

GET           /sql/scenarioes                           controllers.exes.SqlController.adminExerciseList
POST          /sql/scenarioes                           controllers.exes.SqlController.adminIndex
#newExercise
GET           /sql/newScenarioForm                      controllers.exes.SqlController.adminNewExerciseForm

GET           /sql/admin/exerciseList                   controllers.exes.SqlController.adminExerciseList

GET           /sql/import                               controllers.exes.SqlController.adminImportExercises
GET           /sql/export                               controllers.exes.SqlController.adminExportExercises
GET           /sql/exportFile                           controllers.exes.SqlController.adminExportExercisesAsFile

GET           /sql/admin/exerciseList/:id               controllers.exes.SqlController.adminEditExerciseForm(id: Int)
PUT           /sql/admin/exerciseList/:id               controllers.exes.SqlController.adminEditExercise(id: Int)
POST          /sql/admin/exerciseList/:id               controllers.exes.SqlController.adminEditExercise(id: Int)
DELETE        /sql/admin/exerciseList/:id               controllers.exes.SqlController.adminDeleteExercise(id: Int)

PUT           /sql/exercise/:id/state                   controllers.exes.SqlController.adminChangeExState(id: Int)

# All
GET           /sql/                                     controllers.exes.SqlController.index
GET           /sql/scenario/:scId/:exType               controllers.exes.SqlController.filteredScenario(scId: Int, exType: String, site: Int ?= 1)
GET           /sql/:id                                  controllers.exes.SqlController.exercise(id: Int)

PUT           /sql/:id                                  controllers.exes.SqlController.correctLive(id: Int)
POST          /sql/:id                                  controllers.exes.SqlController.correct(id: Int)
# Sql - Ende

# Courses
GET           /courses/new                              controllers.CourseAdminController.newCourseForm
POST          /courses/new                              controllers.CourseAdminController.newCourse

GET           /course/:id                               controllers.CourseAdminController.course(id: Int)
POST          /course/addController/:id                 controllers.CourseAdminController.addAdmin(id: Int)

# Login && Logout
GET           /register                                 controllers.LoginController.registerForm
POST          /register                                 controllers.LoginController.register

PUT           /checkUserName                            controllers.LoginController.checkUserName

GET           /login                                    controllers.LoginController.login(tries: Int = 0)
POST          /authenticate                             controllers.LoginController.authenticate

GET           /logout                                   controllers.LoginController.logout
GET           /direct                                   controllers.LoginController.fromWuecampus(name: String ?= "", courseId: Int ?= -1, courseName: String ?= "")

# Evaluation
GET           /eval                                     controllers.EvaluationController.index
POST          /eval                                     controllers.EvaluationController.submit
GET           /eval/stats                               controllers.AdminController.evaluation


# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                             controllers.Assets.versioned(path="/public", file: Asset)
