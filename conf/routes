# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                        controllers.Application.index

# User
GET           /user                                                    controllers.UserController.index

GET           /myCourses                                               controllers.UserController.myCourses

GET           /preferences                                             controllers.UserController.preferences

PUT           /preferences/updateOptions                               controllers.UserController.saveShowHideAgg
PUT           /preferences/updatePassword                              controllers.UserController.saveNewPassword

# Controller
GET           /admin                                                   controllers.AdminController.index

GET           /users                                                   controllers.AdminController.users
PUT           /users/changeRole                                        controllers.AdminController.changeRole

GET           /courses                                                 controllers.AdminController.courses

# LTI Test
GET           /lti                                                     controllers.LTIController.honeypot
POST          /lti                                                     controllers.LTIController.honeypot

# Random tools
GET           /random/:toolType                                        controllers.RandomExerciseController.index(toolType: String)
GET           /random/:toolType/:exPart                                controllers.RandomExerciseController.newExercise(toolType: String, exPart: String)
PUT           /random/:toolType/:exPart                                controllers.RandomExerciseController.correctLive(toolType: String, exPart: String)

# File tools
GET           /fileTools/:toolType/admin                               controllers.FileExerciseController.adminIndex(toolType: String)

GET           /fileTools/:toolType/admin/import                        controllers.FileExerciseController.adminImportExercises(toolType: String)
GET           /fileTools/:toolType/admin/export                        controllers.FileExerciseController.adminExportExercises(toolType: String)
GET           /fileTools/:toolType/admin/exportFile                    controllers.FileExerciseController.adminExportExercisesAsFile(toolType: String)

GET           /fileTools/:toolType/admin/exerciseList                  controllers.FileExerciseController.adminExerciseList(toolType: String)
GET           /fileTools/:toolType/admin/newExForm                     controllers.FileExerciseController.adminNewExerciseForm(toolType: String)
PUT           /fileTools/:toolType/admin/exerciseList                  controllers.FileExerciseController.adminCreateExercise(toolType: String)
POST          /fileTools/:toolType/admin/exerciseList                  controllers.FileExerciseController.adminCreateExercise(toolType: String)

GET           /fileTools/:toolType/admin/exerciseList/:id              controllers.FileExerciseController.adminEditExerciseForm(toolType: String, id: Int)
PUT           /fileTools/:toolType/admin/exerciseList/:id              controllers.FileExerciseController.adminEditExercise(toolType: String, id: Int)
POST          /fileTools/:toolType/admin/exerciseList/:id              controllers.FileExerciseController.adminEditExercise(toolType: String, id: Int)
DELETE        /fileTools/:toolType/admin/exerciseList/:id              controllers.FileExerciseController.adminDeleteExercise(toolType: String, id: Int)

PUT           /fileTools/:toolType/admin/exercise/:id/state            controllers.FileExerciseController.adminChangeExState(toolType: String, id: Int)

# User
GET           /fileTools/:toolType/                                    controllers.FileExerciseController.index(toolType: String)
GET           /fileTools/:toolType/exercises                           controllers.FileExerciseController.exerciseList(toolType: String, page: Int ?= 1)

GET           /fileTools/:toolType/templates/:id/:fileExtension        controllers.FileExerciseController.downloadTemplate(toolType: String, id: Int, fileExtension: String)
GET           /fileTools/:toolType/:id/:fileExtension                  controllers.FileExerciseController.exercise(toolType: String, id: Int, fileExtension: String)
POST          /fileTools/:toolType/:id/:fileExtension                  controllers.FileExerciseController.uploadSolution(toolType: String, id: Int, fileExtension: String)

GET           /fileTools/:toolType/corrected/:id/:part                 controllers.FileExerciseController.downloadCorrected(toolType: String, id: Int, part: String)

# Collection Tools
GET           /colTools/:toolType/admin                                controllers.CollectionController.adminIndex(toolType: String)

GET           /colTools/:toolType/admin/collections                    controllers.CollectionController.adminCollectionsList(toolType: String)

GET           /colTools/:toolType/admin/import                         controllers.CollectionController.adminImportCollections(toolType: String)
GET           /colTools/:toolType/admin/export                         controllers.CollectionController.adminExportCollections(toolType: String)
GET           /colTools/:toolType/admin/exportAsFile                   controllers.CollectionController.adminExportCollectionsAsFile(toolType: String)

GET           /colTools/:toolType/admin/collections/newForm            controllers.CollectionController.adminNewCollectionForm(toolType: String)
GET           /colTools/:toolType/admin/collections/:collId            controllers.CollectionController.adminEditCollectionForm(toolType: String, collId: Int)
POST          /colTools/:toolType/admin/collections/:collId            controllers.CollectionController.adminEditCollection(toolType: String, collId: Int)
DELETE        /colTools/:toolType/admin/collections/:collId            controllers.CollectionController.adminDeleteCollection(toolType: String, collId: Int)

GET           /colTools/:toolType/admin/:collId                        controllers.CollectionController.adminExercisesInCollection(toolType: String, collId: Int)

PUT           /colTools/:toolType/admin/exercise/:id/state             controllers.CollectionController.adminChangeCollectionState(toolType: String, id: Int)

GET           /colTools/:toolType/                                     controllers.CollectionController.index(toolType: String)
GET           /colTools/:toolType/collections                          controllers.CollectionController.collectionList(toolType: String, page: Int ?= 1)

GET           /colTools/:toolType/collections/:collId                  controllers.CollectionController.collection(toolType: String, collId: Int, page: Int ?= 1)
GET           /colTools/:toolType/solve/:collId/:exId                  controllers.CollectionController.exercise(toolType: String, collId: Int, exId: Int)
PUT           /colTools/:toolType/solve/:collId/:exId                  controllers.CollectionController.correctLive(toolType: String, collId: Int, exId: Int)
POST          /colTools/:toolType/solve/:collId/:exId                  controllers.CollectionController.correct(toolType: String, collId: Int, exId: Int)

GET           /colTools/:toolType/:collId/newExForm                    controllers.CollectionController.newExerciseForm(toolType: String, collId :Int)
GET           /colTools/:toolType/:collId/:exId/editForm               controllers.CollectionController.editExerciseForm(toolType: String, collId: Int, exId: Int)
POST          /colTools/:toolType/:collId/:exId                        controllers.CollectionController.editExercise(toolType: String, collId: Int, exId: Int)
DELETE        /colTools/:toolType/:collId/:exId                        controllers.CollectionController.deleteExerciseInCollection(toolType: String, collId: Int, exId: Int)

# Normal exercises
GET           /tools/:toolType/admin                                   controllers.ExerciseController.adminIndex(toolType: String)

GET           /tools/:toolType/admin/import                            controllers.ExerciseController.adminImportExercises(toolType: String)
GET           /tools/:toolType/admin/export                            controllers.ExerciseController.adminExportExercises(toolType: String)
GET           /tools/:toolType/admin/exportFile                        controllers.ExerciseController.adminExportExercisesAsFile(toolType: String)

GET           /tools/:toolType/admin/exerciseList                      controllers.ExerciseController.adminExerciseList(toolType: String)

GET           /tools/:toolType/admin/newExForm                         controllers.ExerciseController.adminNewExerciseForm(toolType: String)

GET           /tools/:toolType/admin/exerciseList/:id                  controllers.ExerciseController.adminEditExerciseForm(toolType: String, id: Int)

PUT           /tools/:toolType/admin/exerciseList/:id                  controllers.ExerciseController.adminEditExercise(toolType: String, id: Int)
POST          /tools/:toolType/admin/exerciseList/:id                  controllers.ExerciseController.adminEditExercise(toolType: String, id: Int)

DELETE        /tools/:toolType/admin/exerciseList/:id                  controllers.ExerciseController.adminDeleteExercise(toolType: String, id: Int)

PUT           /tools/:toolType/admin/exercise/:id/state                controllers.ExerciseController.adminChangeExState(toolType: String, id: Int)


GET           /tools/:toolType/                                        controllers.ExerciseController.index(toolType: String)
GET           /tools/:toolType/exercises                               controllers.ExerciseController.exerciseList(toolType: String, page: Int ?= 1)

GET           /tools/:toolType/:id/:part                               controllers.ExerciseController.exercise(toolType: String, id: Int, part: String)
PUT           /tools/:toolType/:id/:part                               controllers.ExerciseController.correctLive(toolType: String, id: Int, part: String)
POST          /tools/:toolType/:id/:part                               controllers.ExerciseController.correct(toolType: String, id: Int, part: String)

# Other routes
GET           /prog/declaration                                        controllers.ExerciseController.progGetDeclaration(lang: String)
GET           /tools/web/playground                                    controllers.ExerciseController.webPlayground
GET           /tools/web/solution/:id/:part                            controllers.ExerciseController.webSolution(id: Int, part: String)
PUT           /tools/web/solution/:id/:part                            controllers.ExerciseController.updateWebSolution(id: Int, part: String)

# Courses
GET           /courses/new                                             controllers.CourseAdminController.newCourseForm
POST          /courses/new                                             controllers.CourseAdminController.newCourse

GET           /course/:id                                              controllers.CourseAdminController.course(id: Int)
POST          /course/addController/:id                                controllers.CourseAdminController.addAdmin(id: Int)

# Login && Logout
GET           /register                                                controllers.LoginController.registerForm
POST          /register                                                controllers.LoginController.register

PUT           /checkUserName                                           controllers.LoginController.checkUserName

GET           /login                                                   controllers.LoginController.login
POST          /authenticate                                            controllers.LoginController.authenticate

GET           /logout                                                  controllers.LoginController.logout
GET           /direct                                                  controllers.LoginController.fromWuecampus(name: String ?= "", courseId: Int ?= -1, courseName: String ?= "")

# Evaluation
GET           /eval                                                    controllers.EvaluationController.index
POST          /eval                                                    controllers.EvaluationController.submit
GET           /eval/stats                                              controllers.AdminController.evaluation

# Javascript routes
GET           /javascriptRoutes                                        controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                            controllers.Assets.versioned(path="/public", file: Asset)
