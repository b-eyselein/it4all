# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                        controllers.Application.index

# User
GET           /user                                                    controllers.UserController.index
GET           /preferences                                             controllers.UserController.preferences
PUT           /preferences/updateOptions                               controllers.UserController.saveShowHideAgg
PUT           /preferences/updatePassword                              controllers.UserController.saveNewPassword

# Controller
GET           /admin                                                   controllers.AdminController.index

GET           /users                                                   controllers.AdminController.users
PUT           /users/changeRole/:user                                  controllers.AdminController.changeRole(user: String)

# LTI Test
GET           /lti                                                     controllers.LTIController.honeypot
POST          /lti                                                     controllers.LTIController.honeypot

# Essentials - Nary, Boolean, Ebnf?
GET           /essentials                                              controllers.randomExes.EssentialsController.index

GET           /essentials/nary/conv                                    controllers.randomExes.NaryController.newNaryConversionQuestion(fromBase: String ?= "RANDOM", toBase: String ?= "RANDOM")
PUT           /essentials/nary/conv                                    controllers.randomExes.NaryController.checkNaryConversionSolution

GET           /essentials/nary/add                                     controllers.randomExes.NaryController.newNaryAdditionQuestion(base: String ?= "RANDOM")
PUT           /essentials/nary/add                                     controllers.randomExes.NaryController.checkNaryAdditionSolution

GET           /essentials/nary/twocomp                                 controllers.randomExes.NaryController.newNaryTwoComplementQuestion(verbose: Boolean ?= true)
PUT           /essentials/nary/twocomp                                 controllers.randomExes.NaryController.checkNaryTwoComplementSolutionLive

GET           /essentials/bool/fillout                                 controllers.randomExes.BoolController.newBoolFilloutQuestion(opsAsSymbols: Boolean ?= false)
PUT           /essentials/bool/fillout                                 controllers.randomExes.BoolController.checkBoolFilloutSolution

GET           /essentials/bool/creation                                controllers.randomExes.BoolController.newBoolCreationQuestion
PUT           /essentials/bool/creation                                controllers.randomExes.BoolController.checkBoolCreationSolution
# Essentials - End


# File tools
GET           /fileTools/:toolType/admin                               controllers.exes.fileExes.AFileExController.adminIndex(toolType: String)

GET           /fileTools/:toolType/admin/import                        controllers.exes.fileExes.AFileExController.adminImportExercises(toolType: String)
GET           /fileTools/:toolType/admin/export                        controllers.exes.fileExes.AFileExController.adminExportExercises(toolType: String)
GET           /fileTools/:toolType/admin/exportFile                    controllers.exes.fileExes.AFileExController.adminExportExercisesAsFile(toolType: String)

GET           /fileTools/:toolType/admin/exerciseList                  controllers.exes.fileExes.AFileExController.adminExerciseList(toolType: String)
GET           /fileTools/:toolType/admin/newExForm                     controllers.exes.fileExes.AFileExController.adminNewExerciseForm(toolType: String)
PUT           /fileTools/:toolType/admin/exerciseList                  controllers.exes.fileExes.AFileExController.adminCreateExercise(toolType: String)
POST          /fileTools/:toolType/admin/exerciseList                  controllers.exes.fileExes.AFileExController.adminCreateExercise(toolType: String)

GET           /fileTools/:toolType/admin/exerciseList/:id              controllers.exes.fileExes.AFileExController.adminEditExerciseForm(toolType: String, id: Int)
PUT           /fileTools/:toolType/admin/exerciseList/:id              controllers.exes.fileExes.AFileExController.adminEditExercise(toolType: String, id: Int)
POST          /fileTools/:toolType/admin/exerciseList/:id              controllers.exes.fileExes.AFileExController.adminEditExercise(toolType: String, id: Int)
DELETE        /fileTools/:toolType/admin/exerciseList/:id              controllers.exes.fileExes.AFileExController.adminDeleteExercise(toolType: String, id: Int)

PUT           /fileTools/:toolType/admin/exercise/:id/state            controllers.exes.fileExes.AFileExController.adminChangeExState(toolType: String, id: Int)

# User
GET           /fileTools/:toolType/                                    controllers.exes.fileExes.AFileExController.index(toolType: String)
GET           /fileTools/:toolType/exercises                           controllers.exes.fileExes.AFileExController.exerciseList(toolType: String, page: Int ?= 1)

GET           /fileTools/:toolType/templates/:id/:fileExtension        controllers.exes.fileExes.AFileExController.downloadTemplate(toolType: String, id: Int, fileExtension: String)
GET           /fileTools/:toolType/:id/:fileExtension                  controllers.exes.fileExes.AFileExController.exercise(toolType: String, id: Int, fileExtension: String)
POST          /fileTools/:toolType/:id/:fileExtension                  controllers.exes.fileExes.AFileExController.uploadSolution(toolType: String, id: Int, fileExtension: String)

GET           /fileTools/:toolType/corrected/:id/:part                 controllers.exes.fileExes.AFileExController.downloadCorrected(toolType: String, id: Int, part: String)
# Spread - Ende



# Question - Anfang
# Controlleristrator
GET           /collections/:toolType/admin                             controllers.exCollections.AExCollectionController.adminIndex(toolType: String)

GET           /collections/:toolType/admin/quizzes                     controllers.exCollections.AExCollectionController.adminCollectionsList(toolType: String)
GET           /collections/:toolType/admin/newQuizForm                 controllers.exCollections.AExCollectionController.adminNewCollectionForm(toolType: String)
POST          /collections/:toolType/admin/quizzes                     controllers.exCollections.AExCollectionController.adminCreateCollection(toolType: String)
PUT           /collections/:toolType/admin/quizzes                     controllers.exCollections.AExCollectionController.adminCreateCollection(toolType: String)

GET           /collections/:toolType/admin/import                      controllers.exCollections.AExCollectionController.adminImportCollections(toolType: String)
GET           /collections/:toolType/admin/export                      controllers.exCollections.AExCollectionController.adminExportCollections(toolType: String)
GET           /collections/:toolType/admin/exportAsFile                controllers.exCollections.AExCollectionController.adminExportCollectionsAsFile(toolType: String)

GET           /collections/:toolType/admin/quizzes/:id                 controllers.exCollections.AExCollectionController.adminEditCollectionForm(toolType: String, id: Int)
PUT           /collections/:toolType/admin/quizzes/:id                 controllers.exCollections.AExCollectionController.adminEditCollection(toolType: String, id: Int)
POST          /collections/:toolType/admin/quizzes/:id                 controllers.exCollections.AExCollectionController.adminEditCollection(toolType: String, id: Int)
DELETE        /collections/:toolType/admin/quizzes/:id                 controllers.exCollections.AExCollectionController.adminDeleteCollection(toolType: String, id: Int)

#GET           /collections/:toolType/freetext/grade                    controllers.exCollections.AExCollectionController.gradeFreetextAnswers(toolType: String)
#GET           /collections/:toolType/freetext/grade/:id/:user          controllers.exCollections.AExCollectionController.gradeFreetextAnswer(toolType: String, id: Int, user: String)

#GET           /collections/:toolType/notAssigned                       controllers.exCollections.AExCollectionController.notAssignedQuestions(toolType: String)
#GET           /collections/:toolType/assign                            controllers.exCollections.AExCollectionController.assignQuestionsForm(toolType: String)
#POST          /collections/:toolType/assign                            controllers.exCollections.AExCollectionController.assignQuestions(toolType: String)

#GET           /collections/:toolType/assign/:id                        controllers.exCollections.AExCollectionController.assignQuestionsSingleForm(toolType: String, id: Int)

PUT           /collections/:toolType/admin/exercise/:id/state          controllers.exCollections.AExCollectionController.adminChangeCollectionState(toolType: String, id: Int)


# All
GET           /collections/:toolType/                                  controllers.exCollections.AExCollectionController.index(toolType: String)
GET           /collections/:toolType/quizzes                           controllers.exCollections.AExCollectionController.collectionList(toolType: String, page: Int ?= 1)

GET           /collections/:toolType/quizzes/:collId                   controllers.exCollections.AExCollectionController.collection(toolType: String, collId: Int, page: Int ?= 1)
GET           /collections/:toolType/quizzed/:collId                   controllers.exCollections.AExCollectionController.filteredCollection(toolType: String, collId: Int, filter: String, page: Int ?=1)


#GET           /collections/:toolType/new/:isFreetext                   controllers.exCollections.AExCollectionController.newQuestionForm(isFreetext: Boolean)
#POST          /collections/:toolType/new/:isFreetext                   controllers.exCollections.AExCollectionController.newQuestion(isFreetext: Boolean)

#GET           /collections/:toolType/edit/:id                          controllers.exCollections.AExCollectionController.editQuestionForm(id: Int)
#POST          /collections/:toolType/edit/:id                          controllers.exCollections.AExCollectionController.editQuestion(id: Int)



#GET          /collections/:toolType/quizzes/export                  controllers.exCollections.AExCollectionController.exportExerciseCollections
#GET          /collections/:toolType/quizzes/import                  controllers.exCollections.AExCollectionController.importExerciseCollections
#POST          /collections/:toolType/quizzes/upload                  controllers.exCollections.AExCollectionController.uploadFile

#GET           /collections/:toolType/newQuizForm                     controllers.exCollections.AExCollectionController.newExerciseCollectionForm

# Quizzes

#GET           /collections/:toolType/start/:collId                     controllers.exCollections.AExCollectionController.quizStart(collId: Int)
#GET           /collections/:toolType/:collId/:exId               controllers.exCollections.AExCollectionController.exercise(collId: Int, exId: Int)
PUT           /collections/:toolType/:collId/:exId                     controllers.exCollections.AExCollectionController.correctLive(toolType: String, collId: Int, exId: Int)
POST          /collections/:toolType/:collId/:exId                     controllers.exCollections.AExCollectionController.correct(toolType: String, collId: Int, exId: Int)
# Question - Ende

# Sql - Anfang
# Controlleristrator
#GET           /sql/admin                                               controllers.exCollections.SqlController.adminIndex
#
#GET           /sql/admin/scenarioes                                    controllers.exCollections.SqlController.adminCollectionsList
#GET           /sql/admin/newScenarioForm                               controllers.exCollections.SqlController.adminNewCollectionForm
#POST          /sql/admin/quizzes                                       controllers.exCollections.SqlController.adminCreateCollection
#PUT           /sql/admin/quizzes                                       controllers.exCollections.SqlController.adminCreateCollection
#
#GET           /sql/admin/import                                        controllers.exCollections.SqlController.adminImportCollections
#GET           /sql/admin/export                                        controllers.exCollections.SqlController.adminExportCollections
#GET           /sql/admin/exportFile                                    controllers.exCollections.SqlController.adminExportCollectionsAsFile
#
#GET           /sql/admin/scenarioes/:id                                controllers.exCollections.SqlController.adminEditCollectionForm(id: Int)
#PUT           /sql/admin/scenarioes/:id                                controllers.exCollections.SqlController.adminEditCollection(id: Int)
#POST          /sql/admin/scenarioes/:id                                controllers.exCollections.SqlController.adminEditCollection(id: Int)
#DELETE        /sql/admin/scenarioes/:id                                controllers.exCollections.SqlController.adminDeleteCollection(id: Int)
#
#PUT           /sql/exercise/:id/state                                  controllers.exCollections.SqlController.adminChangeCollectionState(id: Int)
#
# All
#GET           /sql/                                                    controllers.exCollections.SqlController.index
#GET           /sql/scenarioes                                          controllers.exCollections.SqlController.collectionList(page: Int ?= 1)
#GET           /sql/scenarioes/:collId                                  controllers.exCollections.SqlController.collection(collId: Int, page: Int ?= 1)
#
#GET           /sql/scenarioes/:collId/:filter                          controllers.exCollections.SqlController.filteredCollection(collId: Int, filter: String, site: Int ?= 1)
#GET           /sql/:collId/:id                                         controllers.exCollections.SqlController.exercise(collId: Int, id: Int)
#
#PUT           /sql/:collId/:id                                         controllers.exCollections.SqlController.correctLive(collId: Int, id: Int)
#POST          /sql/:collId/:id                                         controllers.exCollections.SqlController.correct(collId: Int, id: Int)
# Sql - Ende


# idPartExes
GET           /tools/:toolType/admin                                   controllers.exes.idPartExes.AIdPartExController.adminIndex(toolType: String)

GET           /tools/:toolType/admin/import                            controllers.exes.idPartExes.AIdPartExController.adminImportExercises(toolType: String)
GET           /tools/:toolType/admin/export                            controllers.exes.idPartExes.AIdPartExController.adminExportExercises(toolType: String)
GET           /tools/:toolType/admin/exportFile                        controllers.exes.idPartExes.AIdPartExController.adminExportExercisesAsFile(toolType: String)

GET           /tools/:toolType/admin/exerciseList                      controllers.exes.idPartExes.AIdPartExController.adminExerciseList(toolType: String)
GET           /tools/:toolType/admin/newExForm                         controllers.exes.idPartExes.AIdPartExController.adminNewExerciseForm(toolType: String)
PUT           /tools/:toolType/admin/exerciseList                      controllers.exes.idPartExes.AIdPartExController.adminCreateExercise(toolType: String)
POST          /tools/:toolType/admin/exerciseList                      controllers.exes.idPartExes.AIdPartExController.adminCreateExercise(toolType: String)

GET           /tools/:toolType/admin/exerciseList/:id                  controllers.exes.idPartExes.AIdPartExController.adminEditExerciseForm(toolType: String, id: Int)
PUT           /tools/:toolType/admin/exerciseList/:id                  controllers.exes.idPartExes.AIdPartExController.adminEditExercise(toolType: String, id: Int)
POST          /tools/:toolType/admin/exerciseList/:id                  controllers.exes.idPartExes.AIdPartExController.adminEditExercise(toolType: String, id: Int)
DELETE        /tools/:toolType/admin/exerciseList/:id                  controllers.exes.idPartExes.AIdPartExController.adminDeleteExercise(toolType: String, id: Int)

PUT           /tools/:toolType/admin/exercise/:id/state                controllers.exes.idPartExes.AIdPartExController.adminChangeExState(toolType: String, id: Int)


GET           /tools/:toolType/                                        controllers.exes.idPartExes.AIdPartExController.index(toolType: String)
GET           /tools/:toolType/exercises                               controllers.exes.idPartExes.AIdPartExController.exerciseList(toolType: String, page: Int ?= 1)

GET           /tools/:toolType/:id/:part                               controllers.exes.idPartExes.AIdPartExController.exercise(toolType: String, id: Int, part: String)
PUT           /tools/:toolType/:id                                     controllers.exes.idPartExes.AIdPartExController.correctLive(toolType: String, id: Int)
POST          /tools/:toolType/:id                                     controllers.exes.idPartExes.AIdPartExController.correct(toolType: String, id: Int)

# Other routes
GET           /prog/declaration                                        controllers.exes.idPartExes.AIdPartExController.progGetDeclaration(lang: String)
GET           /web/solution/:id/:username/:part                        controllers.exes.idPartExes.AIdPartExController.webSolution(username: String, id: Int, part: String)

# Courses
GET           /courses/new                                             controllers.CourseAdminController.newCourseForm
POST          /courses/new                                             controllers.CourseAdminController.newCourse

GET           /course/:id                                              controllers.CourseAdminController.course(id: Int)
POST          /course/addController/:id                                controllers.CourseAdminController.addAdmin(id: Int)

# Login && Logout
GET           /register                                                controllers.LoginController.registerForm
POST          /register                                                controllers.LoginController.register

PUT           /checkUserName                                           controllers.LoginController.checkUserName

GET           /login                                                   controllers.LoginController.login()
POST          /authenticate                                            controllers.LoginController.authenticate

GET           /logout                                                  controllers.LoginController.logout
GET           /direct                                                  controllers.LoginController.fromWuecampus(name: String ?= "", courseId: Int ?= -1, courseName: String ?= "")

# Evaluation
GET           /eval                                                    controllers.EvaluationController.index
POST          /eval                                                    controllers.EvaluationController.submit
GET           /eval/stats                                              controllers.AdminController.evaluation

# Javascript routes
GET           /javascriptRoutes                                        controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                            controllers.Assets.versioned(path="/public", file: Asset)
