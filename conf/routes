# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                          controllers.Application.index

# User
GET           /user                                                      controllers.UserController.index

GET           /myCourses                                                 controllers.UserController.myCourses

GET           /preferences                                               controllers.UserController.preferences

PUT           /preferences/updateOptions                                 controllers.UserController.saveShowHideAgg
PUT           /preferences/updatePassword                                controllers.UserController.saveNewPassword

# Controller
GET           /admin                                                     controllers.AdminController.index

GET           /users                                                     controllers.AdminController.users
PUT           /users/changeRole                                          controllers.AdminController.changeRole

# LTI Test
GET           /lti                                                       controllers.LTIController.honeypot
POST          /lti                                                       controllers.LTIController.honeypot

# Random tools
GET           /random/:toolType                                          controllers.exes.RandomExerciseController.index(toolType: String)
GET           /random/:toolType/:exPart                                  controllers.exes.RandomExerciseController.newExercise(toolType: String, exPart: String)
PUT           /random/:toolType/:exPart                                  controllers.exes.RandomExerciseController.correctLive(toolType: String, exPart: String)

# File tools
GET           /fileTools/:toolType/admin                                 controllers.exes.FileExerciseController.adminIndex(toolType: String)

GET           /fileTools/:toolType/admin/import                          controllers.exes.FileExerciseController.adminImportExercises(toolType: String)
GET           /fileTools/:toolType/admin/export                          controllers.exes.FileExerciseController.adminExportExercises(toolType: String)
GET           /fileTools/:toolType/admin/exportFile                      controllers.exes.FileExerciseController.adminExportExercisesAsFile(toolType: String)

GET           /fileTools/:toolType/admin/exerciseList                    controllers.exes.FileExerciseController.adminExerciseList(toolType: String)
GET           /fileTools/:toolType/admin/newExForm                       controllers.exes.FileExerciseController.adminNewExerciseForm(toolType: String)
PUT           /fileTools/:toolType/admin/exerciseList                    controllers.exes.FileExerciseController.adminCreateExercise(toolType: String)
POST          /fileTools/:toolType/admin/exerciseList                    controllers.exes.FileExerciseController.adminCreateExercise(toolType: String)

GET           /fileTools/:toolType/admin/exerciseList/:id                controllers.exes.FileExerciseController.adminEditExerciseForm(toolType: String, id: Int)
PUT           /fileTools/:toolType/admin/exerciseList/:id                controllers.exes.FileExerciseController.adminEditExercise(toolType: String, id: Int)
POST          /fileTools/:toolType/admin/exerciseList/:id                controllers.exes.FileExerciseController.adminEditExercise(toolType: String, id: Int)
DELETE        /fileTools/:toolType/admin/exerciseList/:id                controllers.exes.FileExerciseController.adminDeleteExercise(toolType: String, id: Int)

PUT           /fileTools/:toolType/admin/exercise/:id/state              controllers.exes.FileExerciseController.adminChangeExState(toolType: String, id: Int)

# User
GET           /fileTools/:toolType/                                      controllers.exes.FileExerciseController.index(toolType: String)
GET           /fileTools/:toolType/exercises                             controllers.exes.FileExerciseController.exerciseList(toolType: String, page: Int ?= 1)

GET           /fileTools/:toolType/templates/:id/:fileExtension          controllers.exes.FileExerciseController.downloadTemplate(toolType: String, id: Int, fileExtension: String)
GET           /fileTools/:toolType/:id/:fileExtension                    controllers.exes.FileExerciseController.exercise(toolType: String, id: Int, fileExtension: String)
POST          /fileTools/:toolType/:id/:fileExtension                    controllers.exes.FileExerciseController.uploadSolution(toolType: String, id: Int, fileExtension: String)

GET           /fileTools/:toolType/corrected/:id/:part                   controllers.exes.FileExerciseController.downloadCorrected(toolType: String, id: Int, part: String)

# Collection Tools
GET           /collectionTools/:toolType/admin                           controllers.exes.CollectionController.adminIndex(toolType: String)

GET           /collectionTools/:toolType/admin/collections               controllers.exes.CollectionController.adminCollectionsList(toolType: String)

GET           /collectionTools/:toolType/admin/newCollectionForm         controllers.exes.CollectionController.adminNewCollectionForm(toolType: String)

GET           /collectionTools/:toolType/admin/import                    controllers.exes.CollectionController.adminImportCollections(toolType: String)
GET           /collectionTools/:toolType/admin/export                    controllers.exes.CollectionController.adminExportCollections(toolType: String)
GET           /collectionTools/:toolType/admin/exportAsFile              controllers.exes.CollectionController.adminExportCollectionsAsFile(toolType: String)

GET           /collectionTools/:toolType/admin/collections/:id           controllers.exes.CollectionController.adminEditCollectionForm(toolType: String, id: Int)
PUT           /collectionTools/:toolType/admin/collections/:id           controllers.exes.CollectionController.adminEditCollection(toolType: String, id: Int)
POST          /collectionTools/:toolType/admin/collections/:id           controllers.exes.CollectionController.adminEditCollection(toolType: String, id: Int)
DELETE        /collectionTools/:toolType/admin/collections/:id           controllers.exes.CollectionController.adminDeleteCollection(toolType: String, id: Int)

PUT           /collectionTools/:toolType/admin/exercise/:id/state        controllers.exes.CollectionController.adminChangeCollectionState(toolType: String, id: Int)

GET           /collectionTools/:toolType/                                controllers.exes.CollectionController.index(toolType: String)
GET           /collectionTools/:toolType/collections                     controllers.exes.CollectionController.collectionList(toolType: String, page: Int ?= 1)

GET           /collectionTools/:toolType/collections/:collId             controllers.exes.CollectionController.collection(toolType: String, collId: Int, page: Int ?= 1)
GET           /collectionTools/:toolType/:collId/:exId                   controllers.exes.CollectionController.exercise(toolType: String, collId: Int, exId: Int)
PUT           /collectionTools/:toolType/:collId/:exId                   controllers.exes.CollectionController.correctLive(toolType: String, collId: Int, exId: Int)
POST          /collectionTools/:toolType/:collId/:exId                   controllers.exes.CollectionController.correct(toolType: String, collId: Int, exId: Int)

# Normal exercises
GET           /tools/:toolType/admin                                     controllers.exes.ExerciseController.adminIndex(toolType: String)

GET           /tools/:toolType/admin/import                              controllers.exes.ExerciseController.adminImportExercises(toolType: String)
GET           /tools/:toolType/admin/export                              controllers.exes.ExerciseController.adminExportExercises(toolType: String)
GET           /tools/:toolType/admin/exportFile                          controllers.exes.ExerciseController.adminExportExercisesAsFile(toolType: String)

GET           /tools/:toolType/admin/exerciseList                        controllers.exes.ExerciseController.adminExerciseList(toolType: String)

GET           /tools/:toolType/admin/newExForm                           controllers.exes.ExerciseController.adminNewExerciseForm(toolType: String)

GET           /tools/:toolType/admin/exerciseList/:id                    controllers.exes.ExerciseController.adminEditExerciseForm(toolType: String, id: Int)

PUT           /tools/:toolType/admin/exerciseList/:id                    controllers.exes.ExerciseController.adminEditExercise(toolType: String, id: Int)
POST          /tools/:toolType/admin/exerciseList/:id                    controllers.exes.ExerciseController.adminEditExercise(toolType: String, id: Int)

DELETE        /tools/:toolType/admin/exerciseList/:id                    controllers.exes.ExerciseController.adminDeleteExercise(toolType: String, id: Int)

PUT           /tools/:toolType/admin/exercise/:id/state                  controllers.exes.ExerciseController.adminChangeExState(toolType: String, id: Int)


GET           /tools/:toolType/                                          controllers.exes.ExerciseController.index(toolType: String)
GET           /tools/:toolType/exercises                                 controllers.exes.ExerciseController.exerciseList(toolType: String, page: Int ?= 1)

GET           /tools/:toolType/:id/:part                                 controllers.exes.ExerciseController.exercise(toolType: String, id: Int, part: String)
PUT           /tools/:toolType/:id/:part                                 controllers.exes.ExerciseController.correctLive(toolType: String, id: Int, part: String)
POST          /tools/:toolType/:id/:part                                 controllers.exes.ExerciseController.correct(toolType: String, id: Int, part: String)

# Other routes
GET           /prog/declaration                                          controllers.exes.ExerciseController.progGetDeclaration(lang: String)
GET           /web/solution/:id/:part                                    controllers.exes.ExerciseController.webSolution(id: Int, part: String)
PUT           /web/solution/:id/:part                                    controllers.exes.ExerciseController.updateWebSolution(id: Int, part: String)

# Courses
GET           /courses/new                                               controllers.CourseAdminController.newCourseForm
POST          /courses/new                                               controllers.CourseAdminController.newCourse

GET           /course/:id                                                controllers.CourseAdminController.course(id: Int)
POST          /course/addController/:id                                  controllers.CourseAdminController.addAdmin(id: Int)

# Login && Logout
GET           /register                                                  controllers.LoginController.registerForm
POST          /register                                                  controllers.LoginController.register

PUT           /checkUserName                                             controllers.LoginController.checkUserName

GET           /login                                                     controllers.LoginController.login
POST          /authenticate                                              controllers.LoginController.authenticate

GET           /logout                                                    controllers.LoginController.logout
GET           /direct                                                    controllers.LoginController.fromWuecampus(name: String ?= "", courseId: Int ?= -1, courseName: String ?= "")

# Evaluation
GET           /eval                                                      controllers.EvaluationController.index
POST          /eval                                                      controllers.EvaluationController.submit
GET           /eval/stats                                                controllers.AdminController.evaluation

# Javascript routes
GET           /javascriptRoutes                                          controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                              controllers.Assets.versioned(path="/public", file: Asset)
