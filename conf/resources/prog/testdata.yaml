module: vector.vector
classname: &clazzname Vector2D
description: >
  Schreiben Sie eine Klasse Vector2D. Diese soll einen zweidimensionalen Vektor mit einer x- und einer
  y-Koordinate darstellen. Als Konstruktorargumente werden die x- und die y-Koordinate übergeben. Diese
  sollen auch unter diesen Namen zugreifbar sein.

init_args:
- {name: x, dataType: int}
- {name: y, dataType: int}

constructortests:
- args:   &ia1args {x: 1, y: 1}
  result: *ia1args
- args:   &ia2args {x: 3, y: 4}
  result: *ia2args
- args:   &ia3args {x: 77, y: 51}
  result: *ia3args

functiontests:

- functionname: __str__
  arguments: []
  description: >
    Überschreiben Sie die Methode __str__. Diese soll den Vektor in Koordinatenschreibweise
    (also "(x, y)") zurückgeben.
  returntype: string
  testdata:
  - {init: *ia1args, result: "(1, 1)"}
  - {init: *ia2args, result: "(3, 4)"}
  - {init: *ia3args, result: "(77, 51)"}

- functionname: length
  description: >
    Schreiben Sie eine Methode 'length', die die Länge des (euklidischen) Vektors als
    Gleitkommazahl berechnet und ausgibt.
  arguments: []
  returntype: float
  testdata:
  - {init: *ia1args, result: 1.4142135623730951}
  - {init: *ia2args, result: 5}

- functionname: add_scalar
  description: >
    Schreiben Sie eine Methode 'add_scalar', die zur x- und y-Koordinate jeweils eine Ganzzahl addiert.
    Diese Zahl kann auch negativ sein!
  arguments:
  - {name: factor, dataType: int}
  returntype: void
  testdata:
  - {init: *ia1args, args: {factor: 2}, effects: {x: 3, y: 3}}
  - {init: *ia2args, args: {factor: -3}, effects: {x: 0, y: 1}}
  - {init: *ia3args, args: {factor: 0}, effects: *ia3args}

- functionname: add
  description: >
    Schreiben...
  arguments:
  - {name: other_vector, dataType: {class: *clazzname, module: vector}}
  returntype: void
  testdata:
  - init: *ia1args
    args: {other_vector: {init: *ia1args}}
    effects: {x: 2, y: 2}
  - init: *ia2args
    args: {other_vector: {init: {x: 4, y: -1}}}
    effects: {x: 7, y: 3}