id: 2
semanticVersion: 1.0.0
title: Amazon
author: bje40dc
text: ""
status: APPROVED
shortName: amazon
scriptFile: amazon.sql
exercises:
- id: 1
  semanticVersion: 1.0.0
  title: Alles über die Autoren
  author: bje40dc
  text: Geben Sie alle Spalten der Autorentabelle aus!
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT *
        FROM authors
  - id: 2
    sample: |
      SELECT id, first_name, family_name, birthday
        FROM authors

- id: 2
  semanticVersion: 1.0.0
  title: Nachnamen aller Autoren
  author: bje40dc
  text: Geben Sie die Nachnamen aller Autoren aus!
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT family_name
        FROM authors

- id: 3
  semanticVersion: 1.0.0
  title: Verlagsnamen
  author: bje40dc
  text: Geben Sie die Namen aller Verlage aus!
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT name
        FROM publishers

- id: 4
  semanticVersion: 1.0.0
  title: Namen aller Kunden
  author: bje40dc
  text: Geben Sie die Vor- und Nachnamen aller Kunden aus!
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT first_name, family_name
        FROM customers

- id: 5
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Geben Sie für jedes Buch jeweils den Titel das Erscheinungsjahr und die ISBN aus!
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title, year, isbn
        FROM books

- id: 6
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie den Titel des Buches mit der ISBN '978-3551354051' (ohne Anführungszeichen).
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title
        FROM books
        WHERE isbn = '978-3551354051'

- id: 7
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie den Preis des Buches mit der ISBN '978-3551354068' (ohne Anführungszeichen).
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT price
        FROM books
        WHERE isbn = '978-3551354068'

- id: 8
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie den Vor- und Nachnamen des Autoren mit der ID 3.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT first_name, family_name
        FROM authors
        WHERE id = 3

- id: 9
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie die ID des Autoren des Buches 'Der kleine Prinz' (ohne Anführungszeichen).
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT author_id
        FROM books
        WHERE title = 'Der kleine Prinz'

- id: 10
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie den Namen des Verlages der unter der Telefonnummer '+49 2402 / 806341' erreichbar ist.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT name
        FROM publishers
        WHERE phone = '+49 2402 / 806341'

- id: 11
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Ordnen Sie allen Büchern ihre jeweiligen Autoren zu. Geben Sie jeweils den Titel des Buches und den Nachnamen des Autoren aus!
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title, family_name
        FROM authors
          JOIN books ON authors.id = books.author_id
  tags: [SQL_JOIN]

- id: 12
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie Titel und Preis aller Bücher die im Carlsen-Verlag erschienen sind.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title, price
        FROM books
          JOIN publishers ON publisher_id = publishers.id
        WHERE name = 'Carlsen'
  - id: 2
    sample: |
      SELECT title, price
        FROM books, publishers
        WHERE publisher_id = publishers.id
          AND publishers.name = 'Carlsen'
  tags: [SQL_JOIN]
  hint: Die Zuordnung von Verlag-Id zu Verlag-Name befindet sich in der Tabelle 'publishers'.

- id: 13
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Bestimmen Sie Titel und ISBN sämtlicher Bücher der Autorin 'Rowling' (ohne Anführungszeichen).
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title, isbn
        FROM books
          JOIN authors on books.author_id = authors.id
        WHERE family_name = 'Rowling'
  - id: 2
    sample: |
      SELECT title, isbn
        FROM books, authors
        WHERE books.author_id = authors.id
          AND family_name = 'Rowling'
  tags: [SQL_JOIN]

- id: 14
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Zeigen Sie die Werte aller Ratings an die der Kunde mit der Email 'wilhard_1041@web.de' abgegeben hat.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT rating
        FROM ratings
          JOIN customers ON ratings.customer_id = customers.id
        WHERE email = 'wilhard_1041@web.de'
  tags: [SQL_JOIN]

- id: 15
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wie lautet der Nachname des Kunden der die Bestellung mit der ID 5 aufgegeben hat?
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT family_name
        FROM orders
          JOIN customers ON orders.customer_id = customers.id
        WHERE orders.id = 5
  tags: [SQL_JOIN]

- id: 16
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Geben Sie alle Email-Adressen der Kunden aus die mit 'gmx.de' enden.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT email
        FROM customers
        WHERE email LIKE '%gmx.de'
  hint: Verwenden Sie für die Eingrenzung der Mailadresse den 'LIKE'-Operator.

- id: 17
  semanticVersion: 1.0.0
  title: Billige Bücher
  author: bje40dc
  text: Geben Sie die Titel aller Bücher aus die weniger als 10,00 € kosten.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
  - id: 2
    sample: |
      SELECT title
        FROM books WHERE price < 10.00

- id: 18
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Geben die die IDs aller Bücher aus die sich Kunden wünschen. Achten Sie darauf dass eine ID nur einmal vorkommt.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT DISTINCT book_id
        FROM wishlists

- id: 19
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wählen Sie alle Einträge zu Kunden aus die im Jahr 1981 Geburtstag haben.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT *
        FROM customers
        WHERE birthday LIKE '1981-%'
  hint: Verwenden Sie den 'LIKE'-Operator zu Vergleich des Jahres

- id: 20
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Geben Sie die Titel aller Bücher aus die einen Bestand von weniger als 20.000 Exemplaren oder einen Preis über 14€ haben.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title
        FROM books
        WHERE stock < 20000
           OR price > 14.00
  - id: 2
    sample: |
      SELECT title
        FROM books
        WHERE stock < 20000
           OR price > 14

- id: 21
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wie oft wurde das Buch 'Die Stadt in der Wüste' bewertet? Nennen Sie die Spalte 'Anzahl'.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT COUNT(rating) AS Anzahl
        FROM ratings
          JOIN books ON books.id = ratings.book_id
        WHERE title = 'Die Stadt in der Wüste'
  - id: 2
    sample: |
      SELECT COUNT(*) AS Anzahl
        FROM ratings, books
        WHERE books.id = ratings.book_id
          AND title = 'Die Stadt in der Wüste'
  tags: [SQL_FUNCTION, SQL_JOIN, SQL_ALIAS]

- id: 22
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Welche Durchschnittsbewertung bekam das Buch 'Die Stadt in der Wüste'? Nennen Sie die Spalte 'Durchschnitt'.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT AVG(rating) AS Durchschnitt
        FROM ratings
          JOIN books ON books.id = ratings.book_id
        WHERE title = 'Die Stadt in der Wüste'
  - id: 2
    sample: |
      SELECT AVG(rating) AS Durchschnitt
        FROM ratings, books
        WHERE books.id = ratings.book_id
          AND title = 'Die Stadt in der Wüste'
  tags: [SQL_FUNCTION, SQL_JOIN, SQL_ALIAS]

- id: 23
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wie hoch ist der Gesamtbestand an Harry Potter-Büchern? Nennen Sie die Spalte 'Gesamtbestand'.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT SUM(stock) AS Gesamtbestand
        FROM books
        WHERE title like 'Harry Potter%'
  tags: [SQL_FUNCTION, SQL_ALIAS]

- id: 24
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: >
    Geben Sie jeweils die schlechteste und beste Bewertung des Buches 'Harry Potter und der Halbblutprinz' aus. Nennen Sie
    die Spalten jeweils 'Schlechteste' und 'Beste'.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT min(rating) AS Schlechteste, max(rating) AS Beste
        FROM books
          JOIN ratings ON books.id = ratings.book_id
        WHERE title = 'Harry Potter und der Halbblutprinz'
  - id: 2
    sample: |
      SELECT min(rating) AS Schlechteste, max(rating) AS Beste
        FROM books, ratings
        WHERE books.id = ratings.book_id
          AND title = 'Harry Potter und der Halbblutprinz'
  tags: [SQL_FUNCTION, SQL_ALIAS, SQL_JOIN]

- id: 25
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wie hoch ist der durchschnittliche Bestand aller Bücher? Nennen Sie die Spalte 'Durchschnitt'
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT AVG(stock) AS Durchschnitt
        FROM books
  tags: [SQL_FUNCTION, SQL_ALIAS]

- id: 26
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wie lauten die Nachnamen der Kunden die sich das Buch 'Harry Potter und der Orden des Phönix' wünschen?
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT family_name
        FROM customers
          JOIN wishlists ON wishlists.customer_id = customers.id
          JOIN books on wishlists.book_id = books.id
        WHERE title = 'Harry Potter und der Orden des Phönix'
  - id: 2
    sample: |
      SELECT family_name
        FROM customers, wishlists, books
        WHERE wishlists.customer_id = customers.id
          AND wishlists.book_id = books.id
          AND title = 'Harry Potter und der Orden des Phönix'
  tags: [SQL_DOUBLE_JOIN]

- id: 27
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Suchen Sie die Titel aller Bücher, deren Autor George Orwell ist. Ordnen Sie die Titel nach Erscheinungsjahr abwärts.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title
        FROM books
          JOIN authors on books.author_id = authors.id
        WHERE first_name = 'George'
        AND family_name = 'Orwell'
        ORDER BY year DESC
  tags: [SQL_ORDER_BY, SQL_JOIN]

- id: 28
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Zeigen sie Titel und Autor-ID der drei teuersten Bücher an. Sortieren Sie die Einträge nach Preis abwärts.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title, author_id
        FROM books
        ORDER BY price DESC
        LIMIT 3
  tags: [SQL_ORDER_BY, SQL_LIMIT]

- id: 29
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: >
    Wählen Sie alle Bestellungen aus, die das Buch 'Harry Potter und der Halbblutprinz' enthalten. Geben Sie für diese
    Bestellungen jeweils das Datum und die Anzahl der bestellten Exemplare des Buches aus.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT date, amount
       FROM orders
          JOIN order_positions ON orders.id = order_id
          JOIN books ON books.id = book_id
          WHERE title = 'Harry Potter und der Halbblutprinz'
  tags: [SQL_DOUBLE_JOIN]

- id: 30
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Geben Sie alle Email-Adressen der Kunden aus die mit 'gmx.de ' oder mit 'gmail.com ' enden.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT email
        FROM customers
        WHERE email LIKE '%gmx.de'
        OR email LIKE '%gmail.com'

- id: 31
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: >
    Bestimmen Sie Titel und Preis aller Bücher des Autors 'Tolkien' deren Preis über 10€ liegt. Ordnen Sie die
    Einträge nach Erscheinungsjahr abwärts.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT title, price
        FROM books
          JOIN authors on authors.id = books.author_id
        WHERE authors.family_name = 'Tolkien'
        AND price > 10
        ORDER BY year DESC
  tags: [SQL_ORDER_BY]

- id: 32
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: >
    Berechnen Sie die Anzahl der bestellten Bücher (Tabelle order_positions) die zum Zeitpunkt des Kaufes weniger als
    fünf Euro gekostet haben. Geben Sie das Ergebnis unter dem Spaltenname 'Anzahl' aus.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT SUM(amount) AS Anzahl
        FROM order_positions WHERE price < 5
  - id: 2
    sample:
      SELECT SUM(amount) AS Anzahl
        FROM order_positions WHERE price < 5.00
  tags: [SQL_FUNCTION, SQL_ALIAS]

- id: 33
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: >
    Erfassen Sie die ID aller Autoren und den kumulierten Bestand ihrer Bücher. Ordnen Sie die Einträge nach kumulierten
    Bestand abwärts. Benennen Sie die Spalte des kumulierten Bestandes 'stock_sum' (ohne Anführungszeichen).
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT author_id, sum(stock) AS stock_sum
        FROM books
        GROUP BY author_id
        ORDER BY stock_sum DESC
  tags: [SQL_FUNCTION, SQL_GROUP_BY, SQL_ORDER_BY]
  hint: Verwenden Sie den Sum-Operator und das Schlüsselwort AS.

- id: 34
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Wählen Sie alle Kunden aus die im Februar Geburtstag haben und geben Sie den Vornamen Nachnamen und das Geburtsdatum aus.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT first_name, family_name, birthday
        FROM customers
       WHERE birthday LIKE '%-02-%'
  hint: Verwenden Sie für die Eingrenzung des Geburtsdatums den 'LIKE'-Operator.

- id: 35
  semanticVersion: 1.0.0
  title: TODO!
  author: bje40dc
  text: Geben Sie den Vornamen Nachnamen und Geburtstag des jüngsten Kunden aus.
  exerciseType: SELECT
  status: APPROVED
  samples:
  - id: 1
    sample: |
      SELECT first_name, family_name, birthday
        FROM customers
        ORDER BY birthday DESC
        LIMIT 1
  tags: [SQL_ORDER_BY, SQL_LIMIT]
  hint: Achten Sie darauf dass sich die Spaltennamen nicht verändern.