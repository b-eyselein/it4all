- id: 1
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Größter gemeinsamer Teiler
  author: bje40dc
  text: >
    Implementieren Sie die folgende Funktion ggt(a: int, b -> int) -> int, die den größten gemeinsamen Teiler
    zweier Zahlen berechnet!
  status: APPROVED

  functionname: ggt
  foldername: ggt
  filename: ggt

  inputTypes: [{id: 1, name: a, type: int}, {id: 2, name: b, type: int}]
  outputType: int

  unitTestPart:
    unitTestType: Simplified
    unitTestsDescription: TODO!
    unitTestFiles: []
    unitTestTestConfigs: []

  implementationPart:
    base: |
      def ggt(a: int, b: int) -> int:
          return 0
    files:
      - path: ggt.py
        resourcePath: programming/1-python_basics/1-ggt/ggt_declaration.py
        fileType: python
        editable: true

  sampleSolutions:
    - id: 1
      files:
        - path: ggt.py
          resourcePath: programming/1-python_basics/1-ggt/ggt.py
          fileType: python
          editable: true

  sampleTestData:
    - {id: 1, inputs: [12, 4], output: 4}
    - {id: 2, inputs: [3, 7], output: 1}
    - {id: 3, inputs: [64, 46], output: 2}
    - {id: 4, inputs: [777, 111], output: 111}
    - {id: 5, inputs: [15, 25], output: 5}

- id: 2
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Durchschnitt
  author: bje40dc
  text: >
    Berechnen Sie den Durchschnittswert aller Elemente als Gleitkommazahl in der übergebenen Liste von (Ganz-)Zahlen!
    Bei einer leeren Liste soll 'None' zurückgegeben werden.
  status: APPROVED

  functionname: average
  foldername: average
  filename: average

  inputTypes: [{id: 1, name: my_list, type: list<int>}]
  outputType: float

  unitTestPart:
    unitTestType: Simplified
    unitTestsDescription: TODO!
    unitTestFiles: []
    unitTestTestConfigs: []

  implementationPart:
    base: |
      from typing import List

      def average(my_list: List[int]) -> float:
          return 0
    files:
      - path: average.py
        resourcePath: programming/1-python_basics/2-average/average_declaration.py
        fileType: python
        editable: true

  sampleSolutions:
    - id: 1
      files:
        - path: average.py
          resourcePath: programming/1-python_basics/2-average/average.py
          fileType: python
          editable: false

  sampleTestData:
    - {id: 1, inputs: [], output: null}
    - {id: 2, inputs: [1], output: 1.0}
    - {id: 3, inputs: [3, 5, 7], output: 5.0}

- id: 3
  semanticVersion: 1.0.0
  title: Längste Zeichenkette
  author: bje40dc
  text: >
    Suchen Sie aus einer Liste von Zeichenketten jeweils die längste heraus! Bei einer leeren Liste soll 'None' zurückgegeben werden.
    Ignorieren Sie dabei Groß- und Kleinschreibung.
  status: APPROVED

  functionname: longest_string
  foldername: longest_string
  filename: longest_string

  inputTypes: [{id: 1, name: my_list, type: list<string>}]
  outputType: string

  unitTestPart:
    unitTestType: Simplified
    unitTestsDescription: TODO!
    unitTestFiles: []
    unitTestTestConfigs: []

  implementationPart:
    base: |
      from typing import List

      def longest_string(my_list: List[str]) -> str:
          return ''
    mainFileName: longest_string.py
    files:
      - path: longest_string.py
        resourcePath: programming/1-python_basics/3-longest_string/longest_string_declaration.py
        fileType: python
        editable: true

  sampleSolutions:
    - id: 1
      files:
        - path: longest_string.py
          resourcePath: programming/1-python_basics/3-longest_string/longest_string.py
          fileType: python
          editable: false

  sampleTestData:
    - {id: 1, inputs: [], output: null}
    - {id: 2, inputs: ["0"], output: "0"}
    - {id: 3, inputs: ["1", "11", "111"], output: "111"}
    - {id: 4, inputs: ["1", "121", "12321", "232", "3"], output: "12321"}

- id: 4
  semanticVersion: 1.0.0
  title: Palindrom
  author: bje40dc
  text: >
    Erstellen Sie ein Skript, das prüft, ob der übergebene String ein Palindrom darstellt! Ein leerer String ist für diese Aufgabe auch ein Palindrom.
    Ihr Programm soll Groß- und Kleinschreibung ignorieren, d. h. 'a' == 'A'.
  status: APPROVED

  functionname: is_palindrome
  foldername: palindrome
  filename: palindrome

  inputTypes: [{id: 1, name: word, type: string}]
  outputType: boolean

  unitTestPart:
    unitTestType: Simplified
    unitTestsDescription: TODO!
    unitTestFiles: []
    unitTestTestConfigs: []

  implementationPart:
    base: |
      def is_palindrome(word: str) -> bool:
          return False
    mainFileName: palindrome.py
    files:
      - path: palindrome.py
        resourcePath: programming/1-python_basics/4-palindrome/palindrome_declaration.py
        fileType: python
        editable: true

  sampleSolutions:
    - id: 1
      files:
        - path: palindrome.py
          resourcePath: programming/1-python_basics/4-palindrome/palindrome.py
          fileType: python
          editable: false

  sampleTestData:
    - {id: 1, inputs: "anna", output: true}
    - {id: 2, inputs: "ananas", output: false}
    - {id: 3, inputs: "", output: true}
    - {id: 4, inputs: "qwertzuiiuztrewq", output: true}
    - {id: 5, inputs: "qwertzuiyiuztrewq", output: true}
    - {id: 6, inputs: "Tacocat", output: true}
