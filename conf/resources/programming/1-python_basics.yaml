- id: 1
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Größter gemeinsamer Teiler
  author: bje40dc
  text: >
    Implementieren Sie die folgende Funktion ggt(a: int, b -> int) -> int, die den größten gemeinsamen Teiler
    zweier Zahlen berechnet!
  status: APPROVED

  functionname: ggt

  inputTypes: [{id: 1, name: a, type: int}, {id: 2, name: b, type: int}]
  outputType: int

  unitTestType: Simplified

  unitTestsDescription: TODO!
  unitTestTestConfigs: []

  sampleSolutions:
    - id: 1
      language: PYTHON_3
      base: |
        def ggt(a: int, b: int) -> int:
            return 0
      sample: |
        def ggt(a: int, b: int) -> int:
            while b != 0:
                h = a % b
                a = b
                b = h
            return a

  sampleTestData:
    - {id: 1, inputs: [12, 4], output: 4}
    - {id: 2, inputs: [3, 7], output: 1}
    - {id: 3, inputs: [64, 46], output: 2}
    - {id: 4, inputs: [777, 111], output: 111}
    - {id: 5, inputs: [15, 25], output: 5}

- id: 2
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Durchschnitt
  author: bje40dc
  text: >
    Berechnen Sie den Durchschnittswert aller Elemente als Gleitkommazahl in der übergebenen Liste von (Ganz-)Zahlen!
    Bei einer leeren Liste soll '0' zurückgegeben werden.
  status: APPROVED

  functionname: average

  inputTypes: [{id: 1, name: my_list, type: list<int>}]
  outputType: float

  unitTestType: Simplified

  unitTestsDescription: TODO!
  unitTestTestConfigs: []

  sampleSolutions:
    - id: 1
      language: PYTHON_3
      base: |
        from typing import List

        def average(my_list: List[int]) -> float:
            return 0
      sample: |
        from typing import List

        def average(my_list: List[int]) -> float:
            length = len(my_list)
            if length == 0:
                return 0
            else:
                return sum(my_list) / length

  sampleTestData:
    - {id: 1, inputs: [], output: 0.0}
    - {id: 2, inputs: [1], output: 1.0}
    - {id: 3, inputs: [3, 5, 7], output: 5.0}

- id: 3
  semanticVersion: 1.0.0
  title: Längste Zeichenkette
  author: bje40dc
  text: >
    Suchen Sie aus einer Liste von Zeichenketten jeweils die längste heraus! Bei einer leeren Liste soll der leere String zurückgegeben werden.
    Ignorieren Sie dabei Groß- und Kleinschreibung.
  status: APPROVED

  functionname: longest_string

  inputTypes: [{id: 1, name: my_list, type: list<string>}]
  outputType: string

  unitTestType: Simplified

  unitTestsDescription: TODO!
  unitTestTestConfigs: []

  sampleSolutions:
    - id: 1
      language: PYTHON_3
      base: |
        from typing import List

        def longest_string(my_list: List[str]) -> str:
            return ''
      sample: |
        from typing import List

        def longest_string(my_list: List[str]) -> str:
            longest = ""
            for string in my_list:
                if len(string) > len(longest):
                    longest = string
            return longest
  sampleTestData:
    - {id: 1, inputs: [], output: ""}
    - {id: 2, inputs: ["0"], output: "0"}
    - {id: 3, inputs: ["1", "11", "111"], output: "111"}

- id: 4
  semanticVersion: 1.0.0
  title: Palindrom
  author: bje40dc
  text: >
    Erstellen Sie ein Skript, das prüft, ob der übergebene String ein Palindrom darstellt! Ein leerer String ist für diese Aufgabe auch ein Palindrom.
    Ihr Programm soll Groß- und Kleinschreibung ignorieren, d. h. 'a' == 'A'.
  status: APPROVED

  functionname: is_palindrome

  inputTypes: [{id: 1, name: word, type: string}]
  outputType: boolean

  unitTestType: Simplified

  unitTestsDescription: TODO!
  unitTestTestConfigs: []

  sampleSolutions:
    - id: 1
      language: PYTHON_3
      base: |
        def is_palindrome(word: str) -> bool:
            return False
      sample: |
        def is_palindrome(word: str) -> bool:
            lower = word.lower()
            return lower == lower[::-1]

  sampleTestData:
    - {id: 1, inputs: "anna", output: true}
    - {id: 2, inputs: "ananas", output: false}
    - {id: 3, inputs: "", output: true}
    - {id: 4, inputs: "qwertzuiiuztrewq", output: true}
    - {id: 5, inputs: "qwertzuiyiuztrewq", output: true}
    - {id: 6, inputs: "Tacocat", output: true}
