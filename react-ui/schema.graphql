type AdditionalComparison {
  insertComparison: StringMatchingResult
  selectComparisons: SelectAdditionalComparisons
}

type AttributeList {
  attributeDefinitions: [String!]!
  elementName: String!
}

enum BinaryClassificationResultType {
  TruePositive
  FalsePositive
  FalseNegative
  TrueNegative
}

type CollectionTool {
  allExercises: [Exercise!]!
  collection(collId: Int!): ExerciseCollection
  collectionCount: Long!
  collections: [ExerciseCollection!]!
  exerciseCount: Long!
  id: String!
  isBeta: Boolean!
  lesson(lessonId: Int!): Lesson
  lessonCount: Long!
  lessons: [Lesson!]!
  name: String!
  proficiencies: [UserProficiency!]!
}

type DTDParseException {
  msg: String!
  parsedLine: String!
}

type EbnfCorrectionResult {
  proficienciesUpdated: Boolean
  result: EbnfResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

enum EbnfExPart {
  GrammarCreation
}

type EbnfExerciseContent {
  predefinedTerminals: [String!]
  sampleSolutions: [EbnfGrammar!]!
}

type EbnfExerciseMutations {
  correct(part: EbnfExPart!, solution: EbnfGrammarInput!): EbnfCorrectionResult!
}

type EbnfGrammar {
  startSymbol: String!
  rules: String!
}

input EbnfGrammarInput {
  startSymbol: String!
  rules: [EbnfRuleInput!]!
}

type EbnfResult {
  x: String!
}

input EbnfRuleInput {
  variable: String!
  rule: String!
}

type ElementDefinition {
  content: String!
  elementName: String!
}

type ElementLine {
  attributeLists: [AttributeList!]!
  elementDefinition: ElementDefinition!
  elementName: String!
}

type ElementLineAnalysisResult {
  attributesCorrect: Boolean!
  contentCorrect: Boolean!
  correctAttributes: String!
  correctContent: String!
}

type ElementLineMatch {
  analysisResult: ElementLineAnalysisResult!
  matchType: MatchType!
  sampleArg: ElementLine!
  userArg: ElementLine!
}

type ExPart {
  id: String!
  isEntryPart: Boolean!
  name: String!
  solved: Boolean
}

type Exercise {
  authors: [String!]!
  collectionId: Int!
  content: ExerciseContentUnionType!
  difficulty: Int!
  exerciseId: Int!
  parts: [ExPart!]!
  text: String!
  title: String!
  toolId: String!
  topicsWithLevels: [TopicWithLevel!]!
}

type ExerciseCollection {
  authors: [String!]!
  collectionId: Int!
  exercise(exId: Int!): Exercise
  exerciseCount: Long!
  exercises: [Exercise!]!
  title: String!
  toolId: String!
}

union ExerciseContentUnionType = EbnfExerciseContent | FlaskExerciseContent | ProgrammingExerciseContent | RegexExerciseContent | SqlExerciseContent | UmlExerciseContent | WebExerciseContent | XmlExerciseContent

type ExerciseFile {
  content: String!
  editable: Boolean!
  fileType: String!
  name: String!
}

input ExerciseFileInput {
  content: String!
  editable: Boolean!
  fileType: String!
  name: String!
}

type FilesSolution {
  files: [ExerciseFile!]!
}

input FilesSolutionInput {
  files: [ExerciseFileInput!]!
}

type FlaskCorrectionResult {
  proficienciesUpdated: Boolean
  result: FlaskResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

type FlaskExerciseContent {
  files: [ExerciseFile!]!
  sampleSolutions: [FilesSolution!]!
  testConfig: FlaskTestsConfig!
  testFiles: [ExerciseFile!]!
}

type FlaskExerciseMutations {
  correct(part: FlaskExercisePart!, solution: FilesSolutionInput!): FlaskCorrectionResult!
}

enum FlaskExercisePart {
  FlaskSingleExPart
}

type FlaskResult {
  maxPoints: Float!
  points: Float!
  testResults: [FlaskTestResult!]!
}

type FlaskSingleTestConfig {
  dependencies: [String!]
  description: String!
  id: Int!
  maxPoints: Int!
  testName: String!
}

type FlaskTestResult {
  stderr: [String!]!
  stdout: [String!]!
  successful: Boolean!
  testId: Int!
  testName: String!
}

type FlaskTestsConfig {
  testClassName: String!
  testFileName: String!
  tests: [FlaskSingleTestConfig!]!
}

type GradedHtmlTaskResult {
  attributeResults: [GradedTextResult!]!
  elementFound: Boolean!
  id: Int!
  isSuccessful: Boolean!
  maxPoints: Float!
  points: Float!
  success: SuccessType!
  textContentResult: GradedTextResult
}

type GradedJsActionResult {
  actionPerformed: Boolean!
  jsAction: JsAction!
  maxPoints: Float!
  points: Float!
}

type GradedJsHtmlElementSpecResult {
  attributeResults: [GradedTextResult!]!
  elementFound: Boolean!
  id: Int!
  isSuccessful: Boolean!
  maxPoints: Float!
  points: Float!
  success: SuccessType!
  textContentResult: GradedTextResult
}

type GradedJsTaskResult {
  gradedJsActionResult: GradedJsActionResult!
  gradedPostResults: [GradedJsHtmlElementSpecResult!]!
  gradedPreResults: [GradedJsHtmlElementSpecResult!]!
  id: Int!
  maxPoints: Float!
  points: Float!
  success: SuccessType!
}

type GradedTextResult {
  awaitedContent: String!
  isSuccessful: Boolean!
  keyName: String!
  maxPoints: Float!
  maybeFoundContent: String
  points: Float!
}

type HtmlTask {
  text: String!
}

type ImplementationCorrectionResult implements ProgrammingTestCorrectionResult {
  stderr: [String!]!
  stdout: [String!]!
  successful: Boolean!
  testSuccessful: Boolean!
}

type ImplementationPart {
  files: [ExerciseFile!]!
  implFileName: String!
}

type JsAction {
  actionType: JsActionType!
  keysToSend: String
  xpathQuery: String!
}

enum JsActionType {
  Click
  FillOut
}

type KeyValueObject {
  key: String!
  value: String!
}

type Lesson {
  content(lessonId: Int!): LessonContent
  contentCount: Long!
  contents: [LessonContent!]!
  description: String!
  lessonId: Int!
  title: String!
  toolId: String!
  video: String
}

interface LessonContent {
  contentId: Int!
  lessonId: Int!
  toolId: String!
}

type LessonMultipleChoiceQuestion {
  answers: [LessonMultipleChoiceQuestionAnswer!]!
  id: Int!
  questionText: String!
}

type LessonMultipleChoiceQuestionAnswer {
  answer: String!
  id: Int!
  isCorrect: Boolean!
}

type LessonMultipleChoiceQuestionsContent implements LessonContent {
  contentId: Int!
  lessonId: Int!
  questions: [LessonMultipleChoiceQuestion!]!
  toolId: String!
}

type LessonTextContent implements LessonContent {
  content: String!
  contentId: Int!
  lessonId: Int!
  toolId: String!
}

type Level {
  levelIndex: Int!
  title: String!
}

type LoggedInUser {
  isAdmin: Boolean!
  username: String!
}

type LoggedInUserWithToken {
  jwt: String!
  loggedInUser: LoggedInUser!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

enum MatchType {
  SUCCESSFUL_MATCH
  PARTIAL_MATCH
  UNSUCCESSFUL_MATCH
}

type Mutation {
  ebnfExercise(collId: Int!, exId: Int!): EbnfExerciseMutations
  flaskExercise(collId: Int!, exId: Int!): FlaskExerciseMutations
  login(credentials: UserCredentials!): LoggedInUserWithToken
  programmingExercise(collId: Int!, exId: Int!): ProgrammingExerciseMutations
  regexExercise(collId: Int!, exId: Int!): RegexExerciseMutations
  register(registerValues: RegisterValues!): String
  sqlExercise(collId: Int!, exId: Int!): SqlExerciseMutations
  umlExercise(collId: Int!, exId: Int!): UmlExerciseMutations
  webExercise(collId: Int!, exId: Int!): WebExerciseMutations
  xmlExercise(collId: Int!, exId: Int!): XmlExerciseMutations
}

enum ProgExPart {
  ActivityDiagram
  Implementation
  TestCreation
}

type ProgrammingCorrectionResult {
  proficienciesUpdated: Boolean
  result: ProgrammingResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

type ProgrammingExerciseContent {
  filename: String!
  implementationPart: ImplementationPart!
  part(partId: String!): ProgExPart
  sampleSolutions: [FilesSolution!]!
  unitTestPart: UnitTestPart!
}

type ProgrammingExerciseMutations {
  correct(part: ProgExPart!, solution: FilesSolutionInput!): ProgrammingCorrectionResult!
}

type ProgrammingResult {
  implementationCorrectionResult: ImplementationCorrectionResult
  maxPoints: Float!
  points: Float!
  proficienciesUpdated: Boolean
  unitTestResults: [UnitTestCorrectionResult!]!
}

interface ProgrammingTestCorrectionResult {
  successful: Boolean!
}

type Query {
  tool(toolId: String!): CollectionTool
  tools: [CollectionTool!]!
}

interface RegexAbstractResult {
  maxPoints: Float!
  points: Float!
}

type RegexCorrectionResult {
  proficienciesUpdated: Boolean
  result: RegexAbstractResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

enum RegexCorrectionType {
  MATCHING
  EXTRACTION
}

enum RegexExPart {
  RegexSingleExPart
}

type RegexExerciseContent {
  correctionType: RegexCorrectionType!
  extractionTestData: [RegexExtractionTestData!]!
  matchTestData: [RegexMatchTestData!]!
  maxPoints: Int!
  part(partId: String!): RegexExPart
  sampleSolutions: [String!]!
}

type RegexExerciseMutations {
  correct(part: RegexExPart!, solution: String!): RegexCorrectionResult!
}

type RegexExtractedValuesComparisonMatchingResult {
  allMatches: [RegexMatchMatch!]!
  maxPoints: Float!
  notMatchedForSample: [String!]!
  notMatchedForUser: [String!]!
  points: Float!
}

type RegexExtractionResult implements RegexAbstractResult {
  extractionResults: [RegexExtractionSingleResult!]!
  maxPoints: Float!
  points: Float!
}

type RegexExtractionSingleResult {
  base: String!
  correct: Boolean!
  extractionMatchingResult: RegexExtractedValuesComparisonMatchingResult!
}

type RegexExtractionTestData {
  base: String!
  id: Int!
}

type RegexMatchMatch {
  matchType: MatchType!
  sampleArg: String!
  userArg: String!
}

type RegexMatchTestData {
  data: String!
  id: Int!
  isIncluded: Boolean!
}

type RegexMatchingResult implements RegexAbstractResult {
  matchingResults: [RegexMatchingSingleResult!]!
  maxPoints: Float!
  points: Float!
}

type RegexMatchingSingleResult {
  isIncluded: Boolean!
  matchData: String!
  resultType: BinaryClassificationResultType!
}

input RegisterValues {
  firstPassword: String!
  secondPassword: String!
  username: String!
}

type SelectAdditionalComparisons {
  groupByComparison: StringMatchingResult!
  limitComparison: StringMatchingResult!
  orderByComparison: StringMatchingResult!
}

type SiteSpec {
  fileName: String!
  htmlTaskCount: Int!
  htmlTasks: [HtmlTask!]!
  jsTaskCount: Int!
}

type SqlBinaryExpressionComparisonMatchingResult {
  allMatches: [SqlBinaryExpressionMatch!]!
  maxPoints: Float!
  notMatchedForSample: [String!]!
  notMatchedForUser: [String!]!
  points: Float!
}

type SqlBinaryExpressionMatch {
  matchType: MatchType!
  sampleArg: String!
  userArg: String!
}

type SqlCell {
  colName: String!
  content: String
  different: Boolean!
}

type SqlColumnComparisonMatchingResult {
  allMatches: [SqlColumnMatch!]!
  maxPoints: Float!
  notMatchedForSample: [String!]!
  notMatchedForUser: [String!]!
  points: Float!
}

type SqlColumnMatch {
  matchType: MatchType!
  sampleArg: String!
  userArg: String!
}

type SqlCorrectionResult {
  proficienciesUpdated: Boolean
  result: SqlResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

enum SqlExPart {
  SqlSingleExPart
}

type SqlExecutionResult {
  sampleResult: SqlQueryResult
  userResult: SqlQueryResult
}

type SqlExerciseContent {
  exerciseType: SqlExerciseType!
  hint: String
  part(partId: String!): SqlExPart
  sampleSolutions: [String!]!
  schemaName: String!
  sqlDbContents: [SqlQueryResult!]!
}

type SqlExerciseMutations {
  correct(part: SqlExPart!, solution: String!): SqlCorrectionResult!
}

enum SqlExerciseType {
  CREATE
  DELETE
  INSERT
  SELECT
  UPDATE
}

type SqlKeyCellValueObject {
  key: String!
  value: SqlCell!
}

type SqlQueriesStaticComparison {
  additionalComparisons: AdditionalComparison!
  columnComparison: SqlColumnComparisonMatchingResult!
  joinExpressionComparison: SqlBinaryExpressionComparisonMatchingResult!
  tableComparison: StringMatchingResult!
  whereComparison: SqlBinaryExpressionComparisonMatchingResult!
}

type SqlQueryResult {
  columnNames: [String!]!
  rows: [SqlRow!]!
  tableName: String!
}

type SqlResult {
  executionResult: SqlExecutionResult!
  maxPoints: Float!
  points: Float!
  staticComparison: SqlQueriesStaticComparison!
}

type SqlRow {
  cells: [SqlKeyCellValueObject!]!
}

type StringMatch {
  matchType: MatchType!
  sampleArg: String!
  userArg: String!
}

type StringMatchingResult {
  allMatches: [StringMatch!]!
  maxPoints: Float!
  notMatchedForSample: [String!]!
  notMatchedForUser: [String!]!
  points: Float!
}

enum SuccessType {
  ERROR
  NONE
  PARTIALLY
}

type Topic {
  abbreviation: String!
  maxLevel: Level!
  title: String!
  toolId: String!
}

type TopicWithLevel {
  level: Level!
  topic: Topic!
}

type UmlAssociation {
  assocName: String
  assocType: UmlAssociationType!
  firstEnd: String!
  firstMult: UmlMultiplicity!
  secondEnd: String!
  secondMult: UmlMultiplicity!
}

type UmlAssociationAnalysisResult {
  assocTypeEqual: Boolean!
  correctAssocType: UmlAssociationType!
  endsParallel: Boolean!
  multiplicitiesEqual: Boolean!
}

input UmlAssociationInput {
  assocName: String
  assocType: UmlAssociationType = ASSOCIATION
  firstEnd: String!
  firstMult: UmlMultiplicity!
  secondEnd: String!
  secondMult: UmlMultiplicity!
}

type UmlAssociationMatch {
  analysisResult: UmlAssociationAnalysisResult!
  matchType: MatchType!
  sampleArg: UmlAssociation!
  userArg: UmlAssociation!
}

type UmlAssociationMatchingResult {
  allMatches: [UmlAssociationMatch!]!
  maxPoints: Float!
  notMatchedForSample: [UmlAssociation!]!
  notMatchedForUser: [UmlAssociation!]!
  points: Float!
}

enum UmlAssociationType {
  AGGREGATION
  ASSOCIATION
  COMPOSITION
}

type UmlAttribute {
  isAbstract: Boolean!
  isDerived: Boolean!
  isStatic: Boolean!
  memberName: String!
  memberType: String!
  visibility: UmlVisibility!
}

type UmlAttributeAnalysisResult {
  abstractCorrect: Boolean!
  correctAbstract: Boolean!
  correctDerived: Boolean!
  correctStatic: Boolean!
  correctType: String!
  correctVisibility: UmlVisibility!
  derivedCorrect: Boolean!
  staticCorrect: Boolean!
  typeComparison: Boolean!
  visibilityComparison: Boolean!
}

input UmlAttributeInput {
  isAbstract: Boolean = false
  isDerived: Boolean = false
  isStatic: Boolean = false
  memberName: String!
  memberType: String!
  visibility: UmlVisibility = PUBLIC
}

type UmlAttributeMatch {
  matchType: MatchType!
  maybeAnalysisResult: UmlAttributeAnalysisResult!
  sampleArg: UmlAttribute!
  userArg: UmlAttribute!
}

type UmlAttributeMatchingResult {
  allMatches: [UmlAttributeMatch!]!
  maxPoints: Float!
  notMatchedForSample: [UmlAttribute!]!
  notMatchedForUser: [UmlAttribute!]!
  points: Float!
}

type UmlClass {
  attributes: [UmlAttribute!]!
  classType: UmlClassType!
  methods: [UmlMethod!]!
  name: String!
}

type UmlClassDiagram {
  associations: [UmlAssociation!]!
  classes: [UmlClass!]!
  implementations: [UmlImplementation!]!
}

input UmlClassDiagramInput {
  associations: [UmlAssociationInput!]!
  classes: [UmlClassInput!]!
  implementations: [UmlImplementationInput!]!
}

input UmlClassInput {
  attributes: [UmlAttributeInput!] = []
  classType: UmlClassType = CLASS
  methods: [UmlMethodInput!] = []
  name: String!
}

type UmlClassMatch {
  analysisResult: UmlClassMatchAnalysisResult!
  compAM: Boolean!
  matchType: MatchType!
  sampleArg: UmlClass!
  userArg: UmlClass!
}

type UmlClassMatchAnalysisResult {
  classTypeCorrect: Boolean!
  correctClassType: UmlClassType!
  maybeAttributeMatchingResult: UmlAttributeMatchingResult
  maybeMethodMatchingResult: UmlMethodMatchingResult
}

type UmlClassMatchingResult {
  allMatches: [UmlClassMatch!]!
  maxPoints: Float!
  notMatchedForSample: [UmlClass!]!
  notMatchedForUser: [UmlClass!]!
  points: Float!
}

enum UmlClassType {
  ABSTRACT
  CLASS
  INTERFACE
}

type UmlCorrectionResult {
  proficienciesUpdated: Boolean
  result: UmlResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

enum UmlExPart {
  ClassSelection
  DiagramDrawing
  DiagramDrawingHelp
  MemberAllocation
}

type UmlExerciseContent {
  mappings: [KeyValueObject!]!
  part(partId: String!): UmlExPart
  sampleSolutions: [UmlClassDiagram!]!
  toIgnore: [String!]!
}

type UmlExerciseMutations {
  correct(part: UmlExPart!, solution: UmlClassDiagramInput!): UmlCorrectionResult!
}

type UmlImplementation {
  subClass: String!
  superClass: String!
}

input UmlImplementationInput {
  subClass: String!
  superClass: String!
}

type UmlImplementationMatch {
  matchType: MatchType!
  sampleArg: UmlImplementation!
  userArg: UmlImplementation!
}

type UmlImplementationMatchingResult {
  allMatches: [UmlImplementationMatch!]!
  maxPoints: Float!
  notMatchedForSample: [UmlImplementation!]!
  notMatchedForUser: [UmlImplementation!]!
  points: Float!
}

type UmlMethod {
  isAbstract: Boolean!
  isStatic: Boolean!
  memberName: String!
  memberType: String!
  parameters: String!
  visibility: UmlVisibility!
}

type UmlMethodAnalysisResult {
  abstractCorrect: Boolean!
  correctAbstract: Boolean!
  correctParameters: String!
  correctStatic: Boolean!
  correctType: String!
  correctVisibility: UmlVisibility!
  parameterComparison: Boolean!
  staticCorrect: Boolean!
  typeComparison: Boolean!
  visibilityComparison: Boolean!
}

input UmlMethodInput {
  isAbstract: Boolean = false
  isStatic: Boolean = false
  memberName: String!
  memberType: String!
  parameters: String!
  visibility: UmlVisibility = PUBLIC
}

type UmlMethodMatch {
  matchType: MatchType!
  maybeAnalysisResult: UmlMethodAnalysisResult!
  sampleArg: UmlMethod!
  userArg: UmlMethod!
}

type UmlMethodMatchingResult {
  allMatches: [UmlMethodMatch!]!
  maxPoints: Float!
  notMatchedForSample: [UmlMethod!]!
  notMatchedForUser: [UmlMethod!]!
  points: Float!
}

enum UmlMultiplicity {
  SINGLE
  UNBOUND
}

type UmlResult {
  assocResult: UmlAssociationMatchingResult
  classResult: UmlClassMatchingResult
  implResult: UmlImplementationMatchingResult
  maxPoints: Float!
  points: Float!
}

enum UmlVisibility {
  PACKAGE
  PRIVATE
  PROTECTED
  PUBLIC
}

type UnitTestCorrectionResult implements ProgrammingTestCorrectionResult {
  description: String!
  shouldFail: Boolean!
  stderr: [String!]!
  stdout: [String!]!
  successful: Boolean!
  testId: Int!
  testSuccessful: Boolean!
}

type UnitTestPart {
  folderName: String!
  testFileName: String!
  unitTestFiles: [ExerciseFile!]!
  unitTestTestConfigs: [UnitTestTestConfig!]!
  unitTestsDescription: String!
}

type UnitTestTestConfig {
  description: String!
  file: ExerciseFile!
  id: Int!
  shouldFail: Boolean!
}

input UserCredentials {
  password: String!
  username: String!
}

type UserProficiency {
  level: Level!
  points: Int!
  pointsForNextLevel: Int!
  topic: Topic!
  username: String!
}

type WebCorrectionResult {
  proficienciesUpdated: Boolean
  result: WebResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

enum WebExPart {
  HtmlPart
  JsPart
}

type WebExerciseContent {
  files: [ExerciseFile!]!
  htmlText: String
  jsText: String
  part(partId: String!): WebExPart
  sampleSolutions: [FilesSolution!]!
  siteSpec: SiteSpec!
}

type WebExerciseMutations {
  correct(part: WebExPart!, solution: FilesSolutionInput!): WebCorrectionResult!
}

type WebResult {
  gradedHtmlTaskResults: [GradedHtmlTaskResult!]!
  gradedJsTaskResults: [GradedJsTaskResult!]!
  maxPoints: Float!
  points: Float!
}

type XmlCorrectionResult {
  proficienciesUpdated: Boolean
  result: XmlResult!
  resultSaved: Boolean!
  solutionSaved: Boolean!
}

type XmlDocumentResult {
  errors: [XmlError!]!
}

type XmlElementLineComparisonMatchingResult {
  allMatches: [ElementLineMatch!]!
  maxPoints: Float!
  notMatchedForSample: [ElementLine!]!
  notMatchedForUser: [ElementLine!]!
  points: Float!
}

type XmlError {
  errorMessage: String!
  errorType: XmlErrorType!
  line: Int!
  success: SuccessType!
}

enum XmlErrorType {
  ERROR
  FATAL
  WARNING
}

enum XmlExPart {
  DocumentCreationXmlPart
  GrammarCreationXmlPart
}

type XmlExerciseContent {
  grammarDescription: String!
  part(partId: String!): XmlExPart
  rootNode: String!
  sampleSolutions: [XmlSolution!]!
}

type XmlExerciseMutations {
  correct(part: XmlExPart!, solution: XmlSolutionInput!): XmlCorrectionResult!
}

type XmlGrammarResult {
  parseErrors: [DTDParseException!]!
  results: XmlElementLineComparisonMatchingResult!
}

type XmlResult {
  documentResult: XmlDocumentResult
  grammarResult: XmlGrammarResult
  maxPoints: Float!
  points: Float!
  successType: SuccessType!
}

type XmlSolution {
  document: String!
  grammar: String!
}

input XmlSolutionInput {
  document: String!
  grammar: String!
}
