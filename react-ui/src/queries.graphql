# /tools

fragment CollectionTool on CollectionTool {
  id
  name
  state
  collectionCount
  lessonCount
  exerciseCount
}

query ToolOverview {
  tools {
    ...CollectionTool
  }
}

# /tools/:toolId
query CollectionToolOverview($toolId: String!) {
  tool(toolId: $toolId) {
    name
    collectionCount
    exerciseCount
    lessonCount
    proficiencies {
      ...UserProficiency
    }
  }
}

fragment UserProficiency on UserProficiency {
  topic {
    ...Topic
  }
  points
  pointsForNextLevel
  level {
    ...Level
  }
}

# /tools/:toolId/allExercises
query AllExercisesOverview($toolId: String!) {
  tool(toolId: $toolId) {
    allExercises {
      topicsWithLevels {
        ...TopicWithLevel
      }
      ...FieldsForLink
    }
  }
}

# /tools/:toolId/collections
fragment CollectionValues on ExerciseCollection {
  collectionId
  title
  exerciseCount
}

query CollectionList($toolId: String!) {
  tool(toolId: $toolId) {
    name
    collections {
      ...CollectionValues
    }
  }
}

# /tools/:toolId/collections/:collId
fragment CollOverviewTool on CollectionTool {
  name
  collection(collId: $collId) {
    title
    exercises {
      ...FieldsForLink
    }
  }
}


query CollectionOverview($toolId: String!, $collId: Int!) {
  tool(toolId: $toolId) {
    ...CollOverviewTool
  }
}

# /tools/:toolId/collections/:collId/exercises/:exId
fragment Part on ExPart {
  id
  name
  isEntryPart
  solved
}

fragment ExerciseOverview on Exercise {
  exerciseId
  title
  text
  parts {
    ...Part
  }
}

query ExerciseOverview($toolId: String!, $collectionId: Int!, $exerciseId: Int!) {
  tool(toolId: $toolId) {
    id
    name
    collection(collId: $collectionId) {
      collectionId
      title
      exercise(exId: $exerciseId) {
        ...ExerciseOverview
      }
    }
  }
}

# /tools/:toolId/collections/:collId/exercises/:exId/parts/:part

fragment ExerciseSolveFields on Exercise {
  exerciseId
  collectionId
  toolId
  title
  text
  content {
    __typename
    ...EbnfExerciseContent
    ...FlaskExerciseContent
    ...ProgrammingExerciseContent
    ...ProgrammingExerciseContent
    ...RegexExerciseContent
    ...SqlExerciseContent
    ...UmlExerciseContent
    ...WebExerciseContent
    ...XmlExerciseContent
  }
}

query Exercise($toolId: String!, $collectionId: Int!, $exerciseId: Int!, $partId: String!) {
  tool(toolId: $toolId) {
    collection(collId: $collectionId) {
      exercise(exId: $exerciseId) {
        ...ExerciseSolveFields
      }
    }
  }
}

# Fragments

fragment ExerciseFile on ExerciseFile {
  name
  fileType
  content
  editable
}

fragment FilesSolution on FilesSolution {
  __typename
  files {
    ...ExerciseFile
  }
}

fragment Level on Level {
  title
  levelIndex
}

fragment Topic on Topic {
  abbreviation
  title
  maxLevel {
    ...Level
  }
}

fragment TopicWithLevel on TopicWithLevel{
  topic {
    ...Topic
  }
  level {
    ...Level
  }
}

fragment FieldsPart on ExPart {
  id
  name
  solved
}

fragment FieldsForLink on Exercise {
  exerciseId
  collectionId
  toolId
  title
  difficulty
  topicsWithLevels {
    ...TopicWithLevel
  }
  parts {
    ...FieldsPart
  }
}

# EBNF

fragment EbnfExerciseContent on EbnfExerciseContent {
  sampleSolutions
}

# Flask
fragment FlaskExerciseContent on FlaskExerciseContent {
  __typename
  testConfig {
    tests {
      id
      testName
      description
    }
  }
  files {
    ...ExerciseFile
  }
  flaskSampleSolutions: sampleSolutions {
    ...FilesSolution
  }
}

# Programming

fragment UnitTestPart on UnitTestPart {
  unitTestFiles {
    ...ExerciseFile
  }
}

fragment ProgrammingExerciseContent on ProgrammingExerciseContent {
  unitTestPart {
    ...UnitTestPart
  }
  implementationPart {
    files {
      ...ExerciseFile
    }
  }
  programmingSampleSolutions: sampleSolutions {
    ...FilesSolution
  }
  programmingPart: part(partId: $partId)
}

# Regex

fragment RegexExerciseContent on RegexExerciseContent {
  regexSampleSolutions: sampleSolutions
}

# Sql

fragment SqlExerciseContent on SqlExerciseContent {
  hint
  sqlSampleSolutions: sampleSolutions
  sqlDbContents {
    ...SqlQueryResult
  }
}

fragment SqlQueryResult on SqlQueryResult {
  tableName
  columnNames
  rows {
    ...SqlRow
  }
}

fragment SqlRow on SqlRow {
  cells {
    key
    value {
      ...SqlCell
    }
  }
}

fragment SqlCell on SqlCell {
  colName
  content
  different
}

# Uml

fragment UmlExerciseContent on UmlExerciseContent {
  toIgnore
  mappings {
    key
    value
  }
  umlSampleSolutions: sampleSolutions {
    ...UmlClassDiagram
  }
  umlPart: part(partId: $partId)
}

fragment UmlClassDiagram on UmlClassDiagram {
  classes {
    ...UmlClass
  }
  associations {
    ...UmlAssociation
  }
  implementations{
    ...UmlImplementation
  }
}

fragment UmlClass on UmlClass {
  classType
  name
  attributes {
    ... UmlAttribute
  }
  methods {
    ...UmlMethod
  }
}

fragment UmlAttribute on UmlAttribute {
  isAbstract
  isDerived
  isStatic
  visibility
  memberName
  memberType
}

fragment UmlMethod on UmlMethod {
  isAbstract
  isStatic
  visibility
  memberName
  parameters
  memberType
}

fragment UmlAssociation on UmlAssociation {
  assocType
  assocName
  firstEnd
  firstMult
  secondEnd
  secondMult
}

fragment UmlImplementation on UmlImplementation {
  subClass
  superClass
}

# Web

fragment WebExerciseContent on WebExerciseContent {
  files {
    ...ExerciseFile
  }
  siteSpec {
    fileName
    htmlTasks {
      text
    }
    jsTaskCount
  }
  webSampleSolutions: sampleSolutions {
    ...FilesSolution
  }
  webPart: part(partId: $partId)
}

# Xml

fragment XmlExerciseContent on XmlExerciseContent {
  rootNode
  grammarDescription
  xmlSampleSolutions: sampleSolutions {
    ...XmlSolution
  }
  xmlPart: part(partId: $partId)
}

fragment XmlSolution on XmlSolution {
  __typename
  document
  grammar
}

# /registerForm

mutation Register($username: String!, $firstPassword: String!, $secondPassword: String!) {
  register(registerValues: {username: $username, firstPassword: $firstPassword, secondPassword: $secondPassword})
}

# /loginForm

fragment LoggedInUserWithToken on LoggedInUserWithToken {
  loggedInUser {
    username
    isAdmin
  }
  jwt
}

mutation Login($username: String!, $password: String!) {
  login(credentials: {username: $username, password: $password}) {
    ...LoggedInUserWithToken
  }
}
