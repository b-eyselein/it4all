# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                                        controllers.FrontendController.index

# Controller
GET           /admin                                                                   controllers.AdminController.index

GET           /users                                                                   controllers.AdminController.users
PUT           /users/changeRole                                                        controllers.AdminController.changeRole

# LTI Test
+ nocsrf
GET           /lti                                                                     controllers.LTIController.honeypot
+ nocsrf
POST          /lti                                                                     controllers.LTIController.honeypot

+ nocsrf
PUT           /api/users/authenticate                                                  controllers.ApiLoginController.apiAuthenticate

+ nocsrf
POST          /api/lti                                                                 controllers.ApiLoginController.ltiHoneypot
GET           /api/claimWebToken/:uuidStr                                              controllers.ApiLoginController.claimJsonWebToken(uuidStr: String)

# Random tools
GET           /randomTools/:toolType/admin/index                                       controllers.coll.RandomExerciseAdminController.adminIndex(toolType: String)
GET           /randomTools/:toolType/admin/learningPaths/read                          controllers.coll.RandomExerciseAdminController.readLearningPaths(toolType: String)

# Admin

GET           /tools/:toolType/admin/index                                             controllers.coll.CollectionAdminController.adminIndex(toolType: String)

GET           /tools/:toolType/learningPaths/read                                      controllers.coll.CollectionAdminController.readLearningPaths(toolType: String)

GET           /tools/:toolType/admin/collections/import                                controllers.coll.CollectionAdminController.adminImportCollections(toolType: String)

GET           /tools/:toolType/admin/collections/export                                controllers.coll.CollectionAdminController.adminExportCollections(toolType: String)
GET           /tools/:toolType/admin/collections/exportAsFile                          controllers.coll.CollectionAdminController.adminExportCollectionsAsFile(toolType: String)

# Create, update and remove collection

GET           /tools/:toolType/admin/collections/createForm                            controllers.coll.CollectionAdminController.adminNewCollectionForm(toolType: String)
POST          /tools/:toolType/admin/collections/create                                controllers.coll.CollectionAdminController.adminCreateCollection(toolType: String)

GET           /tools/:toolType/admin/collection/:collId/editForm                       controllers.coll.CollectionAdminController.adminEditCollectionForm(toolType: String, collId: Int)
POST          /tools/:toolType/admin/collection/:collId/edit                           controllers.coll.CollectionAdminController.adminEditCollection(toolType: String, collId: Int)

DELETE        /tools/:toolType/admin/:collId                                           controllers.coll.CollectionAdminController.adminDeleteCollection(toolType: String, collId: Int)


GET           /tools/:toolType/admin/collections/:collId                               controllers.coll.CollectionAdminController.adminCollection(toolType: String, collId: Int)

GET           /tools/:toolType/admin/collections/:collId/import                        controllers.coll.CollectionAdminController.adminImportExercises(toolType: String, collId: Int)
GET           /tools/:toolType/admin/collections/:collId/export                        controllers.coll.CollectionAdminController.adminExportExercises(toolType: String, collId: Int)
GET           /tools/:toolType/admin/collections/:collId/exportAsFile                  controllers.coll.CollectionAdminController.adminExportExercisesAsFile(toolType: String, collId: Int)

# Create, update and remove exercises

GET           /tools/:toolType/admin/:collId/createExerciseForm                        controllers.coll.CollectionAdminController.adminNewExerciseForm(toolType: String, collId: Int)
POST          /tools/:toolType/admin/:collId/createExercise                            controllers.coll.CollectionAdminController.adminCreateExercise(toolType: String, collId: Int)

GET           /tools/:toolType/admin/:collId/:exId/editForm                            controllers.coll.CollectionAdminController.adminEditExerciseForm(toolType: String, collId: Int, exId: Int)
POST          /tools/:toolType/admin/:collId/:exId/edit                                controllers.coll.CollectionAdminController.adminEditExercise(toolType: String, collId: Int, exId:Int)

DELETE        /tools/:toolType/admin/:collId/:exId                                     controllers.coll.CollectionAdminController.adminDeleteExercise(toolType: String, collId: Int, exId: Int)


PUT           /tools/:toolType/admin/collection/:id/state                              controllers.coll.CollectionAdminController.adminChangeCollectionState(toolType: String, id: Int)
PUT           /tools/:toolType/admin/exercise/:collId/:exId/state                      controllers.coll.CollectionAdminController.adminChangeExerciseState(toolType: String, collId: Int, exId: Int)


GET           /tools/:toolType/:collId/:id/reviews                                     controllers.coll.CollectionAdminController.showReviews(toolType: String, collId:Int, id: Int)

# User

GET           /tools/:toolType/index                                                   controllers.coll.CollectionController.index(toolType: String)

GET           /tools/:toolType/collections/:collId                                     controllers.coll.CollectionController.collection(toolType: String, collId: Int, page: Int ?= 1)
GET           /tools/:toolType/solve/:collId/:exId/:partStr                            controllers.coll.CollectionController.exercise(toolType: String, collId: Int, exId: Int, partStr: String)
PUT           /tools/:toolType/solve/:collId/:exId/:partStr                            controllers.coll.CollectionController.correctLive(toolType: String, collId: Int, exId: Int, partStr: String)

GET           /tools/:toolType/sample/:collId/:exId/:partStr                           controllers.coll.CollectionController.sampleSol(toolType: String, collId: Int, exId: Int, partStr: String)

GET           /tools/:toolType/:collId/newExForm                                       controllers.coll.CollectionController.newExerciseForm(toolType: String, collId :Int)
GET           /tools/:toolType/:collId/:exId/editForm                                  controllers.coll.CollectionController.editExerciseForm(toolType: String, collId: Int, exId: Int)
POST          /tools/:toolType/:collId/:exId                                           controllers.coll.CollectionController.editExercise(toolType: String, collId: Int, exId: Int)
DELETE        /tools/:toolType/:collId/:exId                                           controllers.coll.CollectionController.deleteExerciseInCollection(toolType: String, collId: Int, exId: Int)


GET           /tools/:toolType/:collId/:id/:partStr/evaluationPartForm                 controllers.coll.CollectionController.reviewExercisePartForm(toolType: String, collId: Int, id: Int, partStr: String)
POST          /tools/:toolType/:collId/:id/:partStr/evaluatePart                       controllers.coll.CollectionController.reviewExercisePart(toolType: String,collId: Int, id: Int, partStr: String)

GET           /tools/:toolType/:collId/:exId/:partStr/loadFiles                        controllers.coll.CollectionController.loadFiles(toolType: String, collId: Int, exId: Int, partStr: String)

# API

GET           /api/tools/:toolType/collections                                         controllers.ApiController.apiAllCollections(toolType: String)
GET           /api/tools/:toolType/collections/:collId                                 controllers.ApiController.apiCollection(toolType: String, collId: Int)
GET           /api/tools/:toolType/collections/:collId/exercises                       controllers.ApiController.apiExercises(toolType: String, collId: Int)
GET           /api/tools/:toolType/collections/:collId/exercises/:exId                 controllers.ApiController.apiExercise(toolType: String, collId: Int, exId: Int)

+ nocsrf
PUT           /api/tools/:toolType/collections/:collId/exercises/:exId/:partStr        controllers.ApiController.apiCorrect(toolType: String, collId: Int, exId: Int, partStr: String)

# Admin API

GET           /api/admin/tools/:toolId/readCollections                                 controllers.ApiAdminController.readCollections(toolId: String)
GET           /api/admin/tools/:toolId/collections/:collId/readExercises               controllers.ApiAdminController.readExercises(toolId: String,collId: Int)

+ nocsrf
PUT           /api/admin/tools/:toolId/collections/:collId                             controllers.ApiAdminController.upsertCollection(toolId: String, collId: Int)

+ nocsrf
PUT           /api/admin/tools/:toolId/collections/:collId/exercises/:exId             controllers.ApiAdminController.upsertExercise(toolId: String, collId: Int, exId: Int)

# Other routes
GET           /uml/classDiagram/:id/:part/cd.js                                        controllers.coll.CollectionController.umlClassDiag(collId: Int, id: Int, part: String)

GET           /programming/classDiagram/:collId/:id/cd.js                              controllers.coll.CollectionController.progClassDiagram(collId: Int, id: Int)

GET           /web/solution/:collId/:id/:part/:fileName                                controllers.coll.CollectionController.webSolution(collId: Int, id: Int, part: String, fileName: String)
PUT           /web/solution/:collId/:id/:part                                          controllers.coll.CollectionController.updateWebSolution(collId: Int, id: Int, part: String)


# Login && Logout
GET           /register                                                                controllers.LoginController.registerForm
POST          /register                                                                controllers.LoginController.register

GET           /login                                                                   controllers.LoginController.loginForm
POST          /authenticate                                                            controllers.LoginController.authenticate

GET           /logout                                                                  controllers.LoginController.logout

# Unified routes

GET           /:toolType/learningPaths/:id                                             controllers.MainExerciseController.learningPath(toolType: String, id: Int)

GET           /:toolType/playground                                                    controllers.MainExerciseController.playground(toolType: String)

GET           /:toolType/evaluate                                                      controllers.MainExerciseController.evaluate(toolType: String)
POST          /:toolType/submitEvaluation                                              controllers.MainExerciseController.submitEvaluation(toolType: String)

# Evaluation
GET           /eval/stats                                                              controllers.AdminController.evaluationResults

# Map static resources from the /public folder to the /assets URL path
GET           /*file                                                                   controllers.FrontendController.assetOrDefault(file)
GET           /assets/*file                                                            controllers.Assets.versioned(path="/public", file: Asset)
