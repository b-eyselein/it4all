# source: http://localhost:9000/api/graphql
# timestamp: Thu Apr 02 2020 14:31:46 GMT+0200 (Mitteleurop√§ische Sommerzeit)

interface AbstractCorrectionResult {
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

union AbstractRegexResult = RegexIllegalRegexResult | RegexMatchingResult | RegexExtractionResult

type AdditionalComparison {
  selectComparisons: SelectAdditionalComparisons
  insertComparison: SqlInsertComparisonMatchingResult
}

enum BinaryClassificationResultType {
  FalseNegative
  FalsePositive
  TrueNegative
  TruePositive
}

type Collection {
  id: Int!
  title: String!
  authors: [String!]!
  text: String!
  shortName: String!
  exerciseCount: Int!
  exercises: [Exercise!]!
  exercise(exId: Int!): Exercise
}

type DTDParseException {
  msg: String!
  parsedLine: String!
}

type ElementLine {
  todo: Int
}

type ElementLineAnalysisResult {
  contentCorrect: Boolean!
  correctContent: String!
  attributesCorrect: Boolean!
  correctAttributes: String!
}

type ElementLineMatch implements NewMatch {
  matchType: MatchType!
  userArg: ElementLine
  sampleArg: ElementLine
  maybeAnalysisResult: ElementLineAnalysisResult
  userArgDescription: String
  sampleArgDescription: String
}

union ExContent = ProgExerciseContent | RegexExerciseContent | SqlExerciseContent | UmlExerciseContent | WebExerciseContent | XmlExerciseContent

type Exercise {
  id: Int!
  collectionId: Int!
  toolId: String!
  semanticVersion: SemanticVersion!
  title: String!
  authors: [String!]!
  text: String!
  tags: [ExTag!]!
  difficulty: Int
}

type ExerciseFile {
  name: String!
  resourcePath: String!
  fileType: String!
  editable: Boolean!
  content: String!
}

input ExerciseFileInput {
  name: String!
  resourcePath: String!
  fileType: String!
  editable: Boolean!
  content: String!
}

type ExTag {
  abbreviation: String!
  title: String!
}

type HtmlTask {
  text: String!
}

type ImplementationPart {
  base: String!
  files: [ExerciseFile!]!
  implFileName: String!
  sampleSolFileNames: [String!]!
}

type KeyValueObject {
  key: String!
  value: String!
}

type Lesson {
  id: Int!
  toolId: String!
  title: String!
  description: String!
}

interface MatchingResult {
  matchName: String!
  matchSingularName: String!
  points: Float!
  maxPoints: Float!
  allMatches: [NewMatch!]!
}

enum MatchType {
  ONLY_SAMPLE
  PARTIAL_MATCH
  ONLY_USER
  SUCCESSFUL_MATCH
  UNSUCCESSFUL_MATCH
}

type Mutation {
  correctProgramming(collId: Int!, exId: Int!, part: ProgExPart!, solution: ProgSolutionInput!): ProgCompleteResult
  correctRegex(collId: Int!, exId: Int!, part: RegexExPart!, solution: String!): AbstractRegexResult
  correctSql(collId: Int!, exId: Int!, part: SqlExPart!, solution: String!): SqlAbstractResult
  correctUml(collId: Int!, exId: Int!, part: UmlExPart!, solution: UmlClassDiagramInput!): UmlCompleteResult
  correctWeb(collId: Int!, exId: Int!, part: WebExPart!, solution: WebSolutionInput!): WebCompleteResult
  correctXml(collId: Int!, exId: Int!, part: XmlExPart!, solution: XmlSolutionInput!): XmlCompleteResult
}

interface NewMatch {
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type NormalExecutionResult {
  success: SuccessType!
  logs: String!
}

type ProgCompleteResult {
  solutionSaved: Boolean!
  normalResult: NormalExecutionResult
  unitTestResults: [UnitTestCorrectionResult!]!
}

type ProgExerciseContent {
  functionName: String!
  foldername: String!
  filename: String!
  unitTestPart: UnitTestPart!
  implementationPart: ImplementationPart!
  sampleSolutions: [ProgSampleSolution!]!
}

enum ProgExPart {
  TestCreation
  Implementation
  ActivityDiagram
}

type ProgSampleSolution {
  id: Int!
  sample: ProgSolution!
}

type ProgSolution {
  files: [ExerciseFile!]!
}

input ProgSolutionInput {
  files: [ExerciseFileInput!]!
}

type Query {
  tools: [Tool!]!
  tool(toolId: String!): Tool
}

enum RegexCorrectionType {
  EXTRACTION
  MATCHING
}

type RegexExerciseContent {
  maxPoints: Int!
  correctionType: RegexCorrectionType!
  sampleSolutions: [StringSampleSolution!]!
  matchTestData: [RegexMatchTestData!]!
  extractionTestData: [RegexExtractionTestData!]!
}

enum RegexExPart {
  RegexSingleExPart
}

type RegexExtractedValuesComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [RegexMatchMatch!]!
  points: Float!
  maxPoints: Float!
}

type RegexExtractionResult implements AbstractCorrectionResult {
  extractionResults: [RegexExtractionSingleResult!]!
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type RegexExtractionSingleResult {
  base: String!
  extractionMatchingResult: RegexExtractedValuesComparisonMatchingResult!
  correct: Boolean!
}

type RegexExtractionTestData {
  id: Int!
  base: String!
}

type RegexIllegalRegexResult implements AbstractCorrectionResult {
  message: String!
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type RegexMatchingResult implements AbstractCorrectionResult {
  matchingResults: [RegexMatchingSingleResult!]!
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type RegexMatchingSingleResult {
  matchData: String!
  isIncluded: Boolean!
  resultType: BinaryClassificationResultType!
}

type RegexMatchMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type RegexMatchTestData {
  id: Int!
  data: String!
  isIncluded: Boolean!
}

type SelectAdditionalComparisons {
  groupByComparison: SqlGroupByComparisonMatchingResult!
  orderByComparison: SqlOrderByComparisonMatchingResult!
  limitComparison: SqlLimitComparisonMatchingResult!
}

type SemanticVersion {
  major: Int!
  minor: Int!
  patch: Int!
}

type SiteSpec {
  fileName: String!
  htmlTasks: [HtmlTask!]!
  htmlTaskCount: Int!
  jsTaskCount: Int!
}

union SqlAbstractResult = SqlIllegalQueryResult | SqlWrongQueryTypeResult | SqlResult

type SqlBinaryExpressionComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlBinaryExpressionMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlBinaryExpressionMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlColumnComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlColumnMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlColumnMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlExecutionResult {
  X: Int
}

type SqlExerciseContent {
  exerciseType: SqlExerciseType!
  hint: String
  sampleSolutions: [StringSampleSolution!]!
}

enum SqlExerciseType {
  CREATE
  SELECT
  INSERT
  DELETE
  UPDATE
}

enum SqlExPart {
  SqlSingleExPart
}

type SqlGroupByComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlGroupByMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlGroupByMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlIllegalQueryResult implements AbstractCorrectionResult {
  message: String!
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type SqlInsertComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlInsertMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlInsertMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlLimitComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlLimitMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlLimitMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlOrderByComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlOrderByMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlOrderByMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlQueriesStaticComparison {
  columnComparison: SqlColumnComparisonMatchingResult!
  tableComparison: SqlTableComparisonMatchingResult!
  joinExpressionComparison: SqlBinaryExpressionComparisonMatchingResult!
  whereComparison: SqlBinaryExpressionComparisonMatchingResult!
  additionalComparisons: AdditionalComparison!
}

type SqlResult implements AbstractCorrectionResult {
  staticComparison: SqlQueriesStaticComparison!
  executionResult: SqlExecutionResult!
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type SqlTableComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [SqlTableMatch!]!
  points: Float!
  maxPoints: Float!
}

type SqlTableMatch implements NewMatch {
  sampleArg: String
  userArg: String
  matchType: MatchType!
  userArgDescription: String
  sampleArgDescription: String
}

type SqlWrongQueryTypeResult implements AbstractCorrectionResult {
  message: String!
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type StringSampleSolution {
  id: Int!
  sample: String!
}

enum SuccessType {
  COMPLETE
  ERROR
  NONE
  PARTIALLY
}

type Tool {
  id: String!
  name: String!
  state: ToolState!
  lessonCount: Int!
  lessons: [Lesson!]!
  lesson(lessonId: Int!): Lesson
  collectionCount: Int!
  collections: [Collection!]!
  collection(collId: Int!): Collection
  exerciseCount: Int!
  allExerciseMetaData: [Exercise!]!
  exerciseContent(collId: Int!, exId: Int!): ExContent
}

enum ToolState {
  ALPHA
  BETA
  LIVE
}

type UmlAssociation {
  assocType: UmlAssociationType!
  assocName: String
  firstEnd: String!
  firstMult: UmlMultiplicity!
  secondEnd: String!
  secondMult: UmlMultiplicity!
}

input UmlAssociationInput {
  assocType: UmlAssociationType!
  assocName: String
  firstEnd: String!
  firstMult: UmlMultiplicity!
  secondEnd: String!
  secondMult: UmlMultiplicity!
}

enum UmlAssociationType {
  AGGREGATION
  ASSOCIATION
  COMPOSITION
}

type UmlAttribute {
  visibility: UmlVisibility!
  memberName: String!
  memberType: String!
  isStatic: Boolean!
  isDerived: Boolean!
  isAbstract: Boolean!
}

input UmlAttributeInput {
  visibility: UmlVisibility!
  memberName: String!
  memberType: String!
  isStatic: Boolean = false
  isDerived: Boolean = false
  isAbstract: Boolean = false
}

type UmlClass {
  classType: UmlClassType!
  name: String!
  attributes: [UmlAttribute!]!
  methods: [UmlMethod!]!
}

type UmlClassDiagram {
  classes: [UmlClass!]!
  associations: [UmlAssociation!]!
  implementations: [UmlImplementation!]!
}

input UmlClassDiagramInput {
  classes: [UmlClassInput!]!
  associations: [UmlAssociationInput!]!
  implementations: [UmlImplementationInput!]!
}

input UmlClassInput {
  classType: UmlClassType!
  name: String!
  attributes: [UmlAttributeInput!]!
  methods: [UmlMethodInput!]!
}

enum UmlClassType {
  ABSTRACT
  CLASS
  INTERFACE
}

type UmlCompleteResult implements AbstractCorrectionResult {
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type UmlExerciseContent {
  toIgnore: [String!]!
  sampleSolutions: [UmlSampleSolution!]!
  mappings: [KeyValueObject!]!
}

enum UmlExPart {
  ClassSelection
  DiagramDrawingHelp
  DiagramDrawing
  MemberAllocation
}

type UmlImplementation {
  subClass: String!
  superClass: String!
}

input UmlImplementationInput {
  subClass: String!
  superClass: String!
}

type UmlMethod {
  visibility: UmlVisibility!
  memberName: String!
  memberType: String!
  parameters: String!
  isStatic: Boolean!
  isAbstract: Boolean!
}

input UmlMethodInput {
  visibility: UmlVisibility!
  memberName: String!
  memberType: String!
  parameters: String!
  isStatic: Boolean = false
  isAbstract: Boolean = false
}

enum UmlMultiplicity {
  SINGLE
  UNBOUND
}

type UmlSampleSolution {
  id: Int!
  sample: UmlClassDiagram!
}

enum UmlVisibility {
  PACKAGE
  PRIVATE
  PROTECTED
  PUBLIC
}

type UnitTestCorrectionResult {
  testConfig: UnitTestTestConfig!
  successful: Boolean!
  file: String!
  status: Int!
  stdout: [String!]!
  stderr: [String!]!
}

type UnitTestPart {
  unitTestType: UnitTestType!
  unitTestsDescription: String!
  unitTestFiles: [ExerciseFile!]!
  unitTestTestConfigs: [UnitTestTestConfig!]!
  simplifiedTestMainFile: ExerciseFile
  testFileName: String!
  sampleSolFileNames: [String!]!
}

type UnitTestTestConfig {
  id: Int!
  shouldFail: Boolean!
  description: String!
  file: ExerciseFile!
}

enum UnitTestType {
  Normal
  Simplified
}

type WebCompleteResult implements AbstractCorrectionResult {
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type WebExerciseContent {
  htmlText: String
  jsText: String
  siteSpec: SiteSpec!
  files: [ExerciseFile!]!
  sampleSolutions: [WebSampleSolution!]!
}

enum WebExPart {
  HtmlPart
  JsPart
}

type WebSampleSolution {
  id: Int!
  sample: WebSolution!
}

type WebSolution {
  files: [ExerciseFile!]!
}

input WebSolutionInput {
  files: [ExerciseFileInput!]!
}

type XmlCompleteResult implements AbstractCorrectionResult {
  successType: SuccessType!
  documentResult: [XmlError!]!
  grammarResult: XmlGrammarResult
  solutionSaved: Boolean!
  points: Float!
  maxPoints: Float!
}

type XmlElementLineComparisonMatchingResult implements MatchingResult {
  matchName: String! @deprecated(reason: "Will be deleted")
  matchSingularName: String! @deprecated(reason: "Will be deleted")
  allMatches: [ElementLineMatch!]!
  points: Float!
  maxPoints: Float!
}

type XmlError {
  errorType: XmlErrorType!
  errorMessage: String!
  line: Int!
  success: SuccessType!
}

enum XmlErrorType {
  ERROR
  FATAL
  WARNING
}

type XmlExerciseContent {
  grammarDescription: String!
  rootNode: String!
  sampleSolutions: [XmlSampleSolution!]!
}

enum XmlExPart {
  GrammarCreationXmlPart
  DocumentCreationXmlPart
}

type XmlGrammarResult {
  parseErrors: [DTDParseException!]!
  results: XmlElementLineComparisonMatchingResult!
}

type XmlSampleSolution {
  id: Int!
  sample: XmlSolution!
}

type XmlSolution {
  document: String!
  grammar: String!
}

input XmlSolutionInput {
  document: String!
  grammar: String!
}
