# source: http://localhost:9000/api/graphql
# timestamp: Wed Mar 25 2020 13:35:16 GMT+0100 (Mitteleurop√§ische Normalzeit)

type Collection {
  id: Int!
  title: String!
  authors: [String!]!
  text: String!
  shortName: String!
  exerciseCount: Int!
  exercises: [Exercise!]!
  exercise(exId: Int!): Exercise
}

type Exercise {
  id: Int!
  collectionId: Int!
  toolId: String!
  semanticVersion: SemanticVersion!
  title: String!
  authors: [String!]!
  text: String!
  tags: [ExTag!]!
  difficulty: Int
}

type ExerciseFile {
  name: String!
  resourcePath: String!
  fileType: String!
  editable: Boolean!
  content: String!
}

type ExTag {
  abbreviation: String!
  title: String!
}

type ImplementationPart {
  base: String!
  files: [ExerciseFile!]!
  implFileName: String!
  sampleSolFileNames: [String!]!
}

type ProgExerciseContent {
  functionName: String!
  foldername: String!
  filename: String!
  unitTestPart: UnitTestPart!
  implementationPart: ImplementationPart!
  sampleSolutions: [SampleSolution!]!
}

type ProgSolution {
  files: [ExerciseFile!]!
}

type Query {
  tools: [Tool!]!
  tool(toolId: String!): Tool
  programmingExerciseContent(collId: Int!, exId: Int!): ProgExerciseContent
  regexExerciseContent(collId: Int!, exId: Int!): RegexExerciseContent
  roseExerciseContent(collId: Int!, exId: Int!): RoseExerciseContent
  sqlExerciseContent(collId: Int!, exId: Int!): SqlExerciseContent
  umlExerciseContent(collId: Int!, exId: Int!): UmlExerciseContent
  webExerciseContent(collId: Int!, exId: Int!): WebExerciseContent
  xmlExerciseContent(collId: Int!, exId: Int!): XmlExerciseContent
}

enum RegexCorrectionType {
  EXTRACTION
  MATCHING
}

type RegexExerciseContent {
  maxPoints: Int!
  correctionType: RegexCorrectionType!
  sampleSolutions: [SampleSolution!]!
  matchTestData: [RegexMatchTestData!]!
  extractionTestData: [RegexExtractionTestData!]!
}

type RegexExtractionTestData {
  id: Int!
  base: String!
}

type RegexMatchTestData {
  id: Int!
  data: String!
  isIncluded: Boolean!
}

type RoseExerciseContent {
  fieldWidth: Int!
  fieldHeight: Int!
  isMultiplayer: Boolean!
  sampleSolutions: [SampleSolution!]!
}

type SampleSolution {
  id: Int!
  sample: ProgSolution!
}

type SemanticVersion {
  major: Int!
  minor: Int!
  patch: Int!
}

type SiteSpec {
  fileName: String!
}

type SqlExerciseContent {
  exerciseType: SqlExerciseType!
  hint: String
  sampleSolutions: [SampleSolution!]!
}

enum SqlExerciseType {
  CREATE
  INSERT
  SELECT
  DELETE
  UPDATE
}

type Tool {
  id: String!
  name: String!
  state: ToolState!
  lessonCount: Int!
  collectionCount: Int!
  collections: [Collection!]!
  collection(collId: Int!): Collection
  allExerciseMetaData: [Exercise!]!
}

enum ToolState {
  ALPHA
  BETA
  LIVE
}

type UmlExerciseContent {
  sampleSolutions: [SampleSolution!]!
}

type UnitTestPart {
  unitTestType: UnitTestType!
  unitTestsDescription: String!
  unitTestFiles: [ExerciseFile!]!
  unitTestTestConfigs: [UnitTestTestConfig!]!
  simplifiedTestMainFile: ExerciseFile
  testFileName: String!
  sampleSolFileNames: [String!]!
}

type UnitTestTestConfig {
  id: Int!
  shouldFail: Boolean!
  description: String!
  file: ExerciseFile!
}

enum UnitTestType {
  Normal
  Simplified
}

type WebExerciseContent {
  htmlText: String
  jsText: String
  siteSpec: SiteSpec!
  files: [ExerciseFile!]!
  sampleSolutions: [SampleSolution!]!
}

type XmlExerciseContent {
  grammarDescription: String!
  rootNode: String!
  sampleSolutions: [SampleSolution!]!
}
