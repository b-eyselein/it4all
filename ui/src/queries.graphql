# /registerForm

mutation Register($username: String!, $firstPassword: String!, $secondPassword: String!) {
  register(registerValues: {username: $username, firstPassword: $firstPassword, secondPassword: $secondPassword})
}

# /loginForm

fragment LoggedInUserWithToken on LoggedInUserWithToken {
  loggedInUser {
    username
    isAdmin
  }
  jwt
}

mutation Login($username: String!, $password: String!) {
  login(credentials: {username: $username, password: $password}) {
    ...LoggedInUserWithToken
  }
}

# /tools
query ToolOverview {
  tools {
    id
    name
    state
    collectionCount
    lessonCount
    exerciseCount
  }
}

# /tools/:toolId
query CollectionToolOverview($toolId: String!, $userJwt: String!) {
  tool(toolId: $toolId) {
    name
    collectionCount
    exerciseCount
    lessonCount
  }
  me(userJwt: $userJwt) {
    proficiencies(toolId: $toolId) {
      ...UserProficiency
    }
  }
}

fragment UserProficiency on UserProficiency {
  topic {
    ...Topic
  }
  points
  pointsForNextLevel
  level {
    ...Level
  }
}

# /tools/:toolId/allExercises
query AllExercisesOverview($toolId: String!) {
  tool(toolId: $toolId) {
    allExercises {
      topicsWithLevels {
        ...TopicWithLevel
      }
      ...FieldsForLink
    }
  }
}

# /tools/:toolId/collections
query CollectionList($toolId: String!) {
  tool(toolId: $toolId) {
    name
    collections {
      collectionId
      title
      exerciseCount
    }
  }
}

# /tools/:toolId/collections/:collId
query CollectionOverview($toolId: String!, $collId: Int!) {
  tool(toolId: $toolId) {
    collection(collId: $collId) {
      title
      exercises {
        ...FieldsForLink
      }
    }
  }
}

# /tools/:toolId/collections/:collId/exercises/:exId
query ExerciseOverview($toolId: String!, $collId: Int!, $exId: Int!) {
  tool(toolId: $toolId) {
    collection(collId: $collId) {
      exercise(exId: $exId) {
        exerciseId
        title
        text
        parts {
          ...Part
        }
      }
    }
  }
}

# /tools/:toolId/collections/:collId/exercises/:exId/parts/:part
query Exercise($toolId: String!, $collId: Int!, $exId: Int!, $partId: String!) {
  tool(toolId: $toolId) {
    collection(collId: $collId) {
      exercise(exId: $exId) {
        ...ExerciseSolveFields
        programmingContent {
          ...ProgExerciseContentSolveFields
        }
        regexContent {
          ...RegexExerciseContentSolveFields
        }
        sqlContent {
          ...SqlExerciseContentSolveFields
        }
        umlContent {
          ...UmlExerciseContentSolveFields
        }
        webContent {
          ...WebExerciseContentSolveFields
        }
        xmlContent {
          ...XmlExerciseContentSolveFields
        }
      }
    }
  }
}

# Lesson queries

query LessonsForTool($toolId: String!) {
  tool(toolId: $toolId) {
    name
    lessons {
      id
      title
      description
    }
  }
}

query Lesson($toolId: String!, $lessonId: Int!) {
  tool(toolId: $toolId) {
    name
    lesson(lessonId: $lessonId){
      id
      title
      description
    }
  }
}

# Fragments

fragment Level on Level {
  title
  levelIndex
}

fragment Topic on Topic {
  abbreviation
  title
  maxLevel {
    ...Level
  }
}

fragment TopicWithLevel on TopicWithLevel{
  topic {
    ...Topic
  }
  level {
    ...Level
  }
}

fragment Part on ExPart {
  id
  name
  isEntryPart
}

fragment FieldsForLink on Exercise {
  exerciseId
  collectionId
  toolId
  title
  difficulty
  topicsWithLevels {
    ...TopicWithLevel
  }
}

fragment ExerciseSolveFields on Exercise {
  exerciseId
  collectionId
  toolId
  title
  text
}

fragment ProgExerciseContentSolveFields on ProgrammingExerciseContent {
  unitTestPart {
    unitTestType
    unitTestFiles {
      ...ExerciseFile
    }
  }
  implementationPart {
    files {
      ...ExerciseFile
    }
  }
  sampleSolutions {
    ...ProgrammingSampleSolution
  }
  part(partId: $partId)
}
fragment ProgrammingSampleSolution on ProgrammingSampleSolution {
  __typename
  sample {
    files {
      ...ExerciseFile
    }
  }
}

fragment RegexExerciseContentSolveFields on RegexExerciseContent {
  sampleSolutions {
    ...RegexSampleSolution
  }
  part(partId: $partId)
}

fragment RegexSampleSolution on RegexSampleSolution {
  __typename
  sample
}

fragment SqlExerciseContentSolveFields on SqlExerciseContent {
  hint
  sampleSolutions {
    ...SqlSampleSolution
  }
  part(partId: $partId)
  sqlDbContents {
    ...SqlQueryResult
  }
}

fragment SqlQueryResult on SqlQueryResult {
  tableName
  columnNames
  rows {
    ...SqlRow
  }
}

fragment SqlRow on SqlRow {
  cells {
    key
    value {
      ...SqlCell
    }
  }
}

fragment SqlCell on SqlCell {
  colName
  content
  different
}

fragment SqlSampleSolution on SqlSampleSolution {
  __typename
  sample
}

fragment UmlExerciseContentSolveFields on UmlExerciseContent {
  toIgnore
  mappings {
    key
    value
  }
  sampleSolutions {
    ...UmlSampleSolution
  }
  part(partId: $partId)
}

fragment UmlSampleSolution on UmlSampleSolution {
  __typename
  sample {
    ...UmlClassDiagram
  }
}

fragment UmlClassDiagram on UmlClassDiagram {
  classes {
    ...UmlClass
  }
  associations {
    ...UmlAssociation
  }
  implementations{
    ...UmlImplementation
  }
}

fragment UmlClass on UmlClass {
  classType
  name
  attributes {
    ... UmlAttribute
  }
  methods {
    ...UmlMethod
  }
}

fragment UmlAttribute on UmlAttribute{
  isAbstract
  isDerived
  isStatic
  visibility
  memberName
  memberType
}

fragment UmlMethod on UmlMethod {
  isAbstract
  isStatic
  visibility
  memberName
  parameters
  memberType
}

fragment UmlAssociation on UmlAssociation {
  assocType
  assocName
  firstEnd
  firstMult
  secondEnd
  secondMult
}

fragment UmlImplementation on UmlImplementation {
  subClass
  superClass
}

fragment WebExerciseContentSolveFields on WebExerciseContent {
  files {
    ...ExerciseFile
  }
  siteSpec {
    fileName
    htmlTasks {
      text
    }
    jsTaskCount
  }
  sampleSolutions {
    ...WebSampleSolution
  }
  part(partId: $partId)
}

fragment WebSampleSolution on WebSampleSolution {
  __typename
  sample {
    files {
      ...ExerciseFile
    }
  }
}

fragment XmlExerciseContentSolveFields on XmlExerciseContent {
  rootNode
  grammarDescription
  sampleSolutions {
    ...XmlSampleSolution
  }
  part(partId: $partId)
}

fragment XmlSampleSolution on XmlSampleSolution {
  __typename
  sample {
    document
    grammar
  }
}


fragment ExerciseFile on ExerciseFile {
  name
  fileType
  content
  editable
}

fragment Lesson on Lesson {
  id
  title
}

