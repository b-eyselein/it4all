mutation SqlCorrection($collId: Int!, $exId: Int!, $part: SqlExPart!, $solution: String!) {
  correctSql(collId: $collId, exId: $exId,part: $part, solution: $solution) {
    ...SqlIllegalQueryResult
    ...SqlWrongQueryTypeResult
    ...SqlResult
  }
}

fragment SqlIllegalQueryResult on SqlIllegalQueryResult {
  solutionSaved
  message
  points {
    ... Points
  }
  maxPoints {
    ...Points
  }
}

fragment SqlWrongQueryTypeResult on SqlWrongQueryTypeResult {
  solutionSaved
  message
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Column comparison

fragment ColumnMatch on ColumnMatch {
  matchType
  userArg
  sampleArg
}

fragment ColumnComparison on SqlColumnComparisonMatchingResult {
  allMatches {
    ...ColumnMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Table comparison

fragment TableMatch on TableMatch {
  matchType
  userArg
  sampleArg
}

fragment TableComparison on SqlTableComparisonMatchingResult {
  allMatches {
    ...TableMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# JoinExpression / Where Comparison

fragment BinaryExpressionMatch on BinaryExpressionMatch {
  matchType
  userArg
  sampleArg
}

fragment BinaryExpressionComparison on SqlBinaryExpressionComparisonMatchingResult {
  allMatches {
    ...BinaryExpressionMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Insert comparison

fragment InsertMatch on ExpressionListMatch {
  matchType
  userArg
  sampleArg
}

fragment InsertComparison on SqlInsertComparisonMatchingResult {
  allMatches {
    ...InsertMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Group by comparison

fragment GroupByMatch on GroupByMatch {
  matchType
  sampleArg
  userArg
}

fragment  GroupByComparison on SqlGroupByComparisonMatchingResult {
  allMatches  {
    ...GroupByMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Order By comparison

fragment OrderByMatch on OrderByMatch {
  matchType
  sampleArg
  userArg
}

fragment OrderByComparison on SqlOrderByComparisonMatchingResult {
  allMatches {
    ...OrderByMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Limit comparison

fragment LimitMatch on LimitMatch {
  matchType
  sampleArg
  userArg
}

fragment LimitComparison on SqlLimitComparisonMatchingResult {
  allMatches {
    ...LimitMatch
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Select additional comparisons

fragment SelectAdditionalComparison on SelectAdditionalComparisons {
  groupByComparison {
    ...GroupByComparison
  }
  orderByComparison {
    ...OrderByComparison
  }
  limitComparison {
    ...LimitComparison
  }
}

# Complete result

fragment SqlResult on SqlResult {
  solutionSaved
  staticComparison {
    columnComparison {
      ...ColumnComparison
    }
    tableComparison {
      ...TableComparison
    }
    joinExpressionComparison {
      ...BinaryExpressionComparison
    }
    whereComparison {
      ...BinaryExpressionComparison
    }
    additionalComparisons {
      selectComparisons {
        ...SelectAdditionalComparison
      }
      insertComparison {
        ...InsertComparison
      }
    }
  }
  executionResult {
    __typename
  }
  points {
    ...Points
  }
  maxPoints{
    ...Points
  }
}

fragment Points on Points {
  quarters
}
