# Programming

mutation ProgCorrection($collId: Int!, $exId: Int!, $part: ProgExPart!, $solution: ProgSolutionInput!) {
  correctProgramming(collId: $collId, exId: $exId, part: $part, solution: $solution)  {
    ...ProgCompleteResult
  }
}

fragment ProgCompleteResult on ProgCompleteResult {
  solutionSaved
  normalResult {
    __typename
  }
  unitTestResults {
    __typename
  }
}

# Regex


mutation RegexCorrection($collId: Int!, $exId: Int!, $part: RegexExPart!, $solution: String!) {
  correctRegex(collId: $collId, exId: $exId,part:$part, solution: $solution) {
    ...RegexIllegalRegexResult
    ...RegexMatchingResult
    ...RegexExtractionResult
  }
}

fragment RegexIllegalRegexResult on RegexIllegalRegexResult {
  solutionSaved
  message
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

fragment RegexMatchingSingleResult on RegexMatchingSingleResult {
  resultType
  matchData
}

fragment RegexMatchingResult on RegexMatchingResult {
  solutionSaved
  matchingResults {
    ...RegexMatchingSingleResult
  }
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

fragment RegexExtractionSingleResult on RegexExtractionSingleResult {
  base
  correct
}

fragment RegexExtractionResult on RegexExtractionResult {
  solutionSaved
  extractionResults {
    ...RegexExtractionSingleResult
  }
  points {
    ...Points
  }
  maxPoints{
    ...Points
  }
}

# Uml

mutation UmlCorrection($collId: Int!, $exId: Int!, $part: UmlExPart!, $solution: UmlClassDiagramInput!) {
  correctUml(collId: $collId, exId: $exId,part: $part, solution: $solution) {
    ...UmlCompleteResult
  }
}

fragment UmlCompleteResult on UmlCompleteResult {
  solutionSaved
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Web

mutation WebCorrection($collId: Int!, $exId: Int!,$part: WebExPart!, $solution: [ExerciseFileInput!]!) {
  correctWeb(collId: $collId, exId: $exId,part: $part, solution: $solution) {
    ...WebCompleteResult
  }
}

fragment WebCompleteResult on WebCompleteResult {
  solutionSaved
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
}

# Xml

mutation XmlCorrection($collId: Int!, $exId: Int!,$part: XmlExPart!, $solution: XmlSolutionInput!) {
  correctXml(collId: $collId, exId: $exId,part: $part, solution: $solution) {
    ...XmlCompleteResult
  }
}

fragment XmlCompleteResult on XmlCompleteResult {
  solutionSaved
  successType
  points {
    ...Points
  }
  maxPoints {
    ...Points
  }
  grammarResult {
    __typename
  }
  documentResult {
    __typename
  }
}

# general fragments

fragment Points on Points {
  quarters
}
