GET         /                                                                        controllers.FrontendController.index

# User managemente
# TODO: registration of users ?!?
#PUT          /api/register                                                                controllers.ApiLoginController.register

PUT         /api/users/authenticate                                                  controllers.ApiLoginController.apiAuthenticate

POST        /api/lti                                                                 controllers.ApiLoginController.ltiHoneypot
GET         /api/claimWebToken/:uuidStr                                              controllers.ApiLoginController.claimJsonWebToken(uuidStr: String)

# Collection management

#PUT           /tools/:toolType/admin/collections                                       controllers.coll.CollectionAdminController.adminCreateCollection(toolType: String)
#PUT           /tools/:toolType/admin/collections/:collId                               controllers.coll.CollectionAdminController.adminEditCollection(toolType: String, collId: Int)
#DELETE        /tools/:toolType/admin/collections/:collId                               controllers.coll.CollectionAdminController.adminDeleteCollection(toolType: String, collId: Int)

# Exercise management

#PUT           /tools/:toolType/admin/:collId/exercises                                 controllers.coll.CollectionAdminController.adminCreateExercise(toolType: String, collId: Int)
#PUT           /tools/:toolType/admin/:collId/exercises/:exId                           controllers.coll.CollectionAdminController.adminEditExercise(toolType: String, collId: Int, exId:Int)
#DELETE        /tools/:toolType/admin/:collId/exercises/:exId                           controllers.coll.CollectionAdminController.adminDeleteExercise(toolType: String, collId: Int, exId: Int)

# reviews
#PUT           /tools/:toolType/:collId/:id/:partStr/evaluatePart                       controllers.coll.CollectionController.reviewExercisePart(toolType: String,collId: Int, id: Int, partStr: String)
#GET           /tools/:toolType/:collId/:id/reviews                                     controllers.coll.CollectionAdminController.showReviews(toolType: String, collId:Int, id: Int)

# tool evaluation
#POST          /:toolType/submitEvaluation                                              controllers.MainExerciseController.submitEvaluation(toolType: String)
# GET           /eval/stats                                                              controllers.AdminController.evaluationResults

# API

GET         /api/tools/:toolType/collectionCount                                     controllers.ApiController.apiCollectionCount(toolType: String)
GET         /api/tools/:toolType/collections                                         controllers.ApiController.apiAllCollections(toolType: String)
GET         /api/tools/:toolType/collections/:collId                                 controllers.ApiController.apiCollection(toolType: String, collId: Int)

GET         /api/tools/:toolType/exerciseMetaData                                    controllers.ApiController.apiExerciseMetaDataForTool(toolType: String)
GET         /api/tools/:toolType/collections/:collId/exerciseMetaData                controllers.ApiController.apiExerciseMetaDataForCollection(toolType: String, collId: Int)

GET         /api/tools/:toolType/collections/:collId/exercises                       controllers.ApiController.apiExercises(toolType: String, collId: Int)
GET         /api/tools/:toolType/collections/:collId/exercises/:exId                 controllers.ApiController.apiExercise(toolType: String, collId: Int, exId: Int)

GET         /api/tools/:toolType/lessonCount                                         controllers.ApiController.apiLessonCount(toolType: String)
GET         /api/tools/:toolType/lessons                                             controllers.ApiController.apiAllLessons(toolType: String)
GET         /api/tools/:toolType/lessons/:lessonId                                   controllers.ApiController.apiLesson(toolType: String, lessonId: Int)

PUT         /api/tools/:toolType/collections/:collId/exercises/:exId/:partStr        controllers.ApiController.apiCorrect(toolType: String, collId: Int, exId: Int, partStr: String)

# Admin API

GET         /api/admin/tools/:toolId/readCollections                                 controllers.ApiAdminController.readCollections(toolId: String)
GET         /api/admin/tools/:toolId/collections/:collId/readExercises               controllers.ApiAdminController.readExercises(toolId: String, collId: Int)
GET         /api/admin/tools/:toolId/readLessons                                     controllers.ApiAdminController.readLessons(toolId: String)

PUT         /api/admin/tools/:toolId/collections/:collId                             controllers.ApiAdminController.upsertCollection(toolId: String, collId: Int)
PUT         /api/admin/tools/:toolId/collections/:collId/exercises/:exId             controllers.ApiAdminController.upsertExercise(toolId: String, collId: Int, exId: Int)
PUT         /api/admin/tools/:toolId/lessons/:lessonId                               controllers.ApiAdminController.upsertLesson(toolId: String, lessonId: Int)

# Other routes
GET         /api/tools/sql/:collId/dbContent                                         controllers.ApiController.sqlDbContent(collId: Int)
#GET           /uml/classDiagram/:id/:part/cd.js                                        controllers.coll.CollectionController.umlClassDiag(collId: Int, id: Int, part: String)
#GET           /programming/classDiagram/:collId/:id/cd.js                              controllers.coll.CollectionController.progClassDiagram(collId: Int, id: Int)
#GET           /web/solution/:collId/:id/:part/:fileName                                controllers.coll.CollectionController.webSolution(collId: Int, id: Int, part: String, fileName: String)
#PUT           /web/solution/:collId/:id/:part                                          controllers.coll.CollectionController.updateWebSolution(collId: Int, id: Int, part: String)

# Evaluation


# Map static resources from the /public folder to the /assets URL path
GET         /*file                                                                   controllers.FrontendController.assetOrDefault(file)
GET         /assets/*file                                                            controllers.Assets.versioned(path="/public", file: Asset)
